from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.filters import Command, BaseFilter, StateFilter
from typing import Callable, Any
from keyboards.reply_keyboards import get_driver_cabinet_keyboard
from keyboards.driver_keyboards import (
    get_driver_reviews_keyboard, get_driver_rejections_keyboard,
    get_driver_history_keyboard, get_preorder_list_keyboard, get_preorder_details_keyboard,
    get_my_preorders_keyboard, get_my_preorder_details_keyboard
)
from keyboards.common import Navigate
from utils.callback_factories import (
    PreOrderListPaginator, PreOrderDetails, PreOrderAction, DriverReviewsPaginator,
    DriverRejectionPaginator, DriverRejectionDetails, DriverHistoryPaginator,
    TripDetailsCallbackData, MyPreordersPaginator, MyPreorderAction
)
from dateutil import parser
import html
from datetime import datetime, timedelta
from loguru import logger
from database import queries as db_queries
from states.fsm_states import DriverState
from handlers.shared_state import location_requests
from handlers.common.helpers import send_message_with_photo
from handlers.common.helpers import safe_edit_or_send
from .common.paginator import show_paginated_list
from aiogram.exceptions import TelegramBadRequest
from config.config import TIMEZONE, BASE_DIR

class IsDriver(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        """
        Checks if the user is a registered driver.
        """
        return await db_queries.is_driver(message.from_user.id)

router = Router()

DRIVER_CABINET_IMAGE_PATH = BASE_DIR / "assets" / "images" / "driver_cabinet.jpg"
TRIP_DETAILS_IMAGE_PATH = BASE_DIR / "assets" / "images" / "trip_details.jpg"

# --- Generic Paginator and Formatter ---

def _format_driver_reviews(reviews: list[dict[str, Any]]) -> str:
    """
    Formats a list of driver reviews for display.

    Args:
        reviews: A list of review dictionaries from the database.

    Returns:
        A formatted string of reviews.
    """
    text = ""
    for review in reviews:
        date_str = parser.parse(review['completed_at']).strftime('%d.%m.%Y')
        text += (
            f"<b>{date_str} | {'‚≠ê' * review['rating_score']}</b>\n"
            f"<i>¬´{html.escape(review['rating_comment'])}¬ª</i>\n---\n"
        )
    return text

async def get_driver_cabinet_text_and_keyboard(user_id: int) -> tuple[str, types.ReplyKeyboardMarkup | None]:
    """
    Generates the content and keyboard for the driver's cabinet.

    Args:
        user_id: The Telegram ID of the driver.

    Returns:
        A tuple containing the cabinet text and the corresponding reply keyboard.
    """
    user_data, overall_completed = await db_queries.get_user_cabinet_data(user_id)
    if not user_data or not user_data['driver_user_id']:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ –≤–æ–¥—ñ—è. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", None

    on_shift = user_data['shift_started_at'] is not None
    is_available = user_data['isWorking'] == 1

    if not on_shift:
        status_text = "üî¥ –í—ñ–¥–ø–æ—á–∏–≤–∞—î—Ç–µ"
    elif is_available:
        status_text = "üü¢ –ù–∞ –∑–º—ñ–Ω—ñ (–ø—Ä–∏–π–º–∞—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)"
    else: # on_shift and not is_available
        status_text = "üü° –ù–∞ –∑–º—ñ–Ω—ñ (—Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ)"

    rating = user_data['rating']
    rating_count = user_data['rating_count']
    rating_str = f"{rating:.1f} ‚≠ê ({rating_count} –æ—Ü—ñ–Ω–æ–∫)" if rating_count > 0 else "–Ω–µ–º–∞—î"

    response_text = (
        f'<b>üöï –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤–æ–¥—ñ—è!</b>\n\n'
        f'<b>–í–∞—à —Å—Ç–∞—Ç—É—Å: </b>{status_text}\n'
        f'<b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: </b>{rating_str}\n\n'
        '<b>--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—ó–∑–¥–æ–∫ ---</b>\n'
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∑–º—ñ–Ω—É
    if on_shift and user_data['shift_started_at']:
        response_text += f"<b>–ó–∞ –ø–æ—Ç–æ—á–Ω—É –∑–º—ñ–Ω—É:</b> {user_data['shift_completed']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
    else:
        response_text += "<b>–ó–∞ –ø–æ—Ç–æ—á–Ω—É –∑–º—ñ–Ω—É:</b> 0 –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–∑–º—ñ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)\n"

    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    response_text += f"<b>–ó–∞ –≤–µ—Å—å —á–∞—Å:</b> {overall_completed} –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
    response_text += f"<b>–°–∫–∞—Å–æ–≤–∞–Ω–æ –≤–∞–º–∏ (–∑–∞ –≤–µ—Å—å —á–∞—Å):</b> {user_data['cancelled_count'] or 0} –∑–∞–º–æ–≤–ª–µ–Ω—å\n"

    return response_text, get_driver_cabinet_keyboard(on_shift, is_available)

@router.message(Command('driver'))
@router.message(F.text == 'üöï –î–ª—è –≤–æ–¥—ñ—ó–≤')
async def driver_cabinet_handler(message: types.Message) -> None:
    """
    Handles entry into the driver's cabinet via command or reply keyboard.

    Args:
        message: The user's message.
    """
    text, kb = await get_driver_cabinet_text_and_keyboard(message.from_user.id) # The IsDriver filter is now on the router
    await send_message_with_photo(message, DRIVER_CABINET_IMAGE_PATH, text, kb)

@router.callback_query(Navigate.filter(F.to == "back_to_driver_cabinet"))
async def back_to_driver_cabinet_handler(call: types.CallbackQuery) -> None:
    """
    Handles the "Back to Driver Cabinet" inline button from various sub-menus.

    Args:
        call: The callback query.
    """
    text, kb = await get_driver_cabinet_text_and_keyboard(call.from_user.id)
    # We cannot edit a message to change its keyboard type from Inline to Reply.
    # We must delete the old message and send a new one.
    await send_message_with_photo(call, DRIVER_CABINET_IMAGE_PATH, text, kb, delete_old=True)
    await call.answer()

@router.message(F.text == 'üöÄ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É')
async def start_shift_handler(message: types.Message, state: FSMContext) -> None:
    """
    Handles the "Start Shift" button, prompting the driver to share their live location.

    Args:
        message: The user's message.
        state: The FSM context.
    """
    await state.set_state(DriverState.waiting_for_location)

    await message.answer(
        "<b>–£–≤–∞–≥–∞! –û–±–æ–≤'—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∑–º—ñ–Ω–∏!</b>\n\n"
        "–©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ —É–≤—ñ–º–∫–Ω—É—Ç–∏ <b>—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—é –≤–∞—à–æ—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó</b> –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ.\n\n"
        "<b>–Ø–∫ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏:</b>\n"
        "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Å–∫—Ä—ñ–ø–∫—É (üìé) –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω–∞.\n"
        "2. –û–±–µ—Ä—ñ—Ç—å '–ì–µ–æ–ø–æ–∑–∏—Ü—ñ—è' –∞–±–æ 'Location'.\n"
        "3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–¢—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏ –º–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü—ñ—é' –∞–±–æ 'Share My Live Location'.\n\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∞—à–∞ –∑–º—ñ–Ω–∞ —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
        reply_markup=types.ReplyKeyboardMarkup(keyboard=[
            [types.KeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True
        )
    )

@router.message(DriverState.waiting_for_location, F.location, F.location.live_period.is_not(None))
async def process_live_location_for_shift(message: types.Message, state: FSMContext) -> None:
    """
    Receives the live location and starts the driver's shift.

    Args:
        message: The message containing the live location.
        state: The FSM context.
    """
    driver_id = message.from_user.id
    await db_queries.update_driver_location(driver_id, message.location.latitude, message.location.longitude)
    await db_queries.start_driver_shift(driver_id)
    await state.clear()
    await message.answer(
        "‚úÖ <b>–¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ!</b>\n\n–í–∏ –ø–æ—á–∞–ª–∏ –∑–º—ñ–Ω—É. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        reply_markup=get_driver_cabinet_keyboard(on_shift=True, is_available=True)
    )

@router.message(DriverState.waiting_for_location, F.location)
async def process_wrong_location_for_shift(message: types.Message) -> None:
    """
    Catches a regular location when a live location is expected and informs the driver.

    Args:
        message: The message containing the regular location.
    """
    await message.answer(
        "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó!</b>\n\n"
        "–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É –≥–µ–æ–ø–æ–∑–∏—Ü—ñ—é. –î–ª—è —Ä–æ–±–æ—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–∞–º–µ **—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—é**.\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üìé -> –ì–µ–æ–ø–æ–∑–∏—Ü—ñ—è -> **–¢—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏ –º–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü—ñ—é**."
    )

@router.message(DriverState.waiting_for_location)
async def wrong_input_for_shift_location(message: types.Message) -> None:
    """
    Catches any other input while waiting for a location.

    Args:
        message: The user's message.
    """
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–º–∫–Ω—ñ—Ç—å **—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—é** –≤–∞—à–æ—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É.")

@router.message(F.location, IsDriver(), StateFilter(None))
@router.edited_message(F.location, IsDriver(), StateFilter(None))
async def unified_location_update_handler(message: types.Message) -> None:
    """
    Handles location updates from drivers who are not in an FSM state.
    This covers admin requests and live location updates for on-shift drivers.
    It works for both new and edited messages.
    """
    driver_id = message.from_user.id

    # Case 1: This is a response to an admin's on-demand request
    if driver_id in location_requests:
        admin_id = location_requests.pop(driver_id) # Get admin_id and remove the request
        try:
            await message.bot.send_message(admin_id, f"üìç –í–æ–¥—ñ–π ID <code>{driver_id}</code> –Ω–∞–¥—ñ—Å–ª–∞–≤ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:")
            await message.bot.send_location(admin_id, latitude=message.location.latitude, longitude=message.location.longitude)
            
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            text, kb = await get_driver_cabinet_text_and_keyboard(driver_id)
            await message.answer("‚úÖ –í–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=kb)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—É {admin_id}: {e}")
        return # Stop further processing

    # Case 2: This is a regular live location update from an on-shift driver
    if message.location and message.location.live_period and await db_queries.is_driver_on_shift(driver_id):
        await db_queries.update_driver_location(driver_id, message.location.latitude, message.location.longitude)
        logger.info(f"Live location for driver {driver_id} updated.")
        # No need to send a message back to the driver, it would be spammy.

@router.message(F.text == '‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É')
async def stop_shift_handler(message: types.Message) -> None:
    """
    Handles the "End Shift" button.

    Args:
        message: The user's message.
    """
    await db_queries.stop_driver_shift(message.from_user.id)
    await message.answer("‚úÖ –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–º—ñ–Ω—É. –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–±–æ—Ç—É!", reply_markup=get_driver_cabinet_keyboard(on_shift=False, is_available=False))

@router.message(F.text == '‚è∏Ô∏è –¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')
async def set_unavailable_handler(message: types.Message) -> None:
    """
    Handles the "Temporarily Unavailable" button, pausing order reception.

    Args:
        message: The user's message.
    """
    await db_queries.set_driver_availability(message.from_user.id, is_available=False)
    text, kb = await get_driver_cabinet_text_and_keyboard(message.from_user.id)
    await message.answer("üü° –í–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", reply_markup=kb)

@router.message(F.text == '‚ñ∂Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å')
async def set_available_handler(message: types.Message) -> None:
    """
    Handles the "Return to Orders" button, resuming order reception.

    Args:
        message: The user's message.
    """
    await db_queries.set_driver_availability(message.from_user.id, is_available=True)
    text, kb = await get_driver_cabinet_text_and_keyboard(message.from_user.id)
    await message.answer("üü¢ –í–∏ –∑–Ω–æ–≤—É –ø—Ä–∏–π–º–∞—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", reply_markup=kb)

# --- Driver Reviews Handlers ---

REVIEWS_PER_PAGE = 5

async def show_driver_reviews_page(target: types.Message | types.CallbackQuery, page: int) -> None:
    """
    Displays a paginated list of the driver's reviews.

    Args:
        target: The message or callback object to answer to.
        page: The page number to display.
    """
    driver_id = target.from_user.id
    
    user_data, _ = await db_queries.get_user_cabinet_data(driver_id)
    if not user_data or not user_data['driver_user_id']:
        # Determine how to send the message based on the target type
        reply_target = target.message if isinstance(target, types.CallbackQuery) else target
        await reply_target.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –≤–æ–¥—ñ—è.", reply_markup=get_driver_cabinet_keyboard(on_shift=False, is_available=False))
        return

    rating = user_data['rating']
    rating_count = user_data['rating_count']
    rating_str = f"{rating:.1f} ‚≠ê ({rating_count} –æ—Ü—ñ–Ω–æ–∫)" if rating_count > 0 else "–Ω–µ–º–∞—î"
    
    header_text = (
        f'<b>‚≠ê –ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ –≤—ñ–¥–≥—É–∫–∏</b>\n\n'
        f'<b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {rating_str}\n'
    )

    no_items_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤–æ–¥—ñ—è", callback_data="back_to_driver_cabinet")]
    ])

    await show_paginated_list(
        target=target, page=page,
        count_func=db_queries.get_driver_reviews_count, page_func=db_queries.get_driver_reviews_page,
        keyboard_func=get_driver_reviews_keyboard, title="–í—ñ–¥–≥—É–∫–∏", items_per_page=REVIEWS_PER_PAGE,
        no_items_text=header_text + '\n–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏.',
        no_items_keyboard=no_items_kb,
        prefix_text=header_text, list_formatter=_format_driver_reviews,
        count_func_kwargs={'driver_id': driver_id}, page_func_kwargs={'driver_id': driver_id}
    )

@router.message(F.text == '‚≠ê –ú–æ—ó —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ –≤—ñ–¥–≥—É–∫–∏')
async def driver_reviews_handler(message: types.Message) -> None:
    """
    Handles the "My Rating and Reviews" button.

    Args:
        message: The user's message.
    """
    await show_driver_reviews_page(message, page=0)

@router.callback_query(DriverReviewsPaginator.filter())
async def paginate_driver_reviews(call: types.CallbackQuery, callback_data: DriverReviewsPaginator) -> None:
    """
    Handles pagination for the driver's reviews list.

    Args:
        call: The callback query from pagination buttons.
        callback_data: The paginator callback data.
    """
    await show_driver_reviews_page(call, page=callback_data.page)

# --- Driver Rejections History Handlers ---

REJECTIONS_PER_PAGE = 5

async def show_driver_rejections_page(target: types.Message | types.CallbackQuery, page: int) -> None:
    """
    Displays a paginated list of the driver's order rejections.

    Args:
        target: The message or callback object to answer to.
        page: The page number to display.
    """
    driver_id = target.from_user.id
    no_items_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤–æ–¥—ñ—è", callback_data="back_to_driver_cabinet")]
    ])

    await show_paginated_list(
        target=target, page=page,
        count_func=db_queries.get_driver_rejections_count,
        page_func=db_queries.get_driver_rejections_page,
        keyboard_func=get_driver_rejections_keyboard,
        title="‚Ü™Ô∏è –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–º–æ–≤", items_per_page=REJECTIONS_PER_PAGE,
        no_items_text='<b>‚Ü™Ô∏è –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–º–æ–≤</b>\n\n–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥–º–æ–≤ –≤—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å.',
        no_items_keyboard=no_items_kb,
        item_list_title="–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤—ñ–¥ —è–∫–∏—Ö –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å. –û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π:",
        count_func_kwargs={'driver_id': driver_id}, page_func_kwargs={'driver_id': driver_id},
        items_list_kwarg_name='rejections'
    )

@router.message(F.text == '‚Ü™Ô∏è –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–º–æ–≤')
async def driver_rejections_history_handler(message: types.Message) -> None:
    """
    Handles the "Rejection History" button.

    Args:
        message: The user's message.
    """
    await show_driver_rejections_page(message, page=0)

@router.callback_query(DriverRejectionPaginator.filter())
async def paginate_driver_rejections(call: types.CallbackQuery, callback_data: DriverRejectionPaginator) -> None:
    """
    Handles pagination for the driver's rejections list.

    Args:
        call: The callback query from pagination buttons.
        callback_data: The paginator callback data.
    """
    await show_driver_rejections_page(call, page=callback_data.page)

@router.callback_query(DriverRejectionDetails.filter())
async def show_driver_rejection_details(call: types.CallbackQuery, callback_data: DriverRejectionDetails) -> None:
    """
    Displays detailed information about a specific rejected order.

    Args:
        call: The callback query from a specific rejection button.
        callback_data: The callback data containing the order ID.
    """
    order_id = callback_data.order_id
    order_data = await db_queries.get_rejected_order_details_for_driver(order_id, call.from_user.id)
    if not order_data:
        await call.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        return

    client_id = order_data['client_id']
    client_name = await db_queries.get_client_name(client_id)
    client_stats = await db_queries.get_client_stats(client_id)

    date_str = parser.parse(order_data['created_at']).strftime('%d.%m.%Y –æ %H:%M')

    details_text = (
        f"<b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} (–≤—ñ–¥ —è–∫–æ–≥–æ –≤–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å)</b>\n\n"
        f"<b>–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {date_str}\n"
        f"<b>–ó–≤—ñ–¥–∫–∏:</b> {html.escape(order_data['begin_address'])}\n"
        f"<b>–ö—É–¥–∏:</b> {html.escape(order_data['finish_address'])}\n\n"
        f"<b>--- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞ ---</b>\n"
        f"<b>–Ü–º'—è:</b> {html.escape(client_name or '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"<b>ID:</b> <code>{client_id}</code>\n"
        f"<b>–£—Å–ø—ñ—à–Ω–∏—Ö –ø–æ—ó–∑–¥–æ–∫:</b> {client_stats['finish_applic'] if client_stats else 'N/A'}\n"
        f"<b>–°–∫–∞—Å—É–≤–∞–Ω—å:</b> {client_stats['cancel_applic'] if client_stats else 'N/A'}\n"
    )
    back_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–¥–º–æ–≤", callback_data=Navigate(to="driver_rejections_history_msg").pack())]])
    await safe_edit_or_send(call, details_text, reply_markup=back_kb)
    await call.answer()

@router.callback_query(Navigate.filter(F.to == "driver_rejections_history_msg"))
async def driver_rejections_history_msg_handler(call: types.CallbackQuery) -> None:
    """
    Handles the "Back to Rejection History" button from the details view.

    Args:
        call: The callback query.
    """
    await show_driver_rejections_page(call, page=0)

# --- Pre-Order List Handlers ---

PREORDERS_PER_PAGE = 5

async def show_preorder_list_page(target: types.Message | types.CallbackQuery, page: int) -> None:
    """
    Displays a paginated list of available pre-orders for drivers to accept.

    Args:
        target: The message or callback object to answer to.
        page: The page number to display.
    """
    no_items_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤–æ–¥—ñ—è", callback_data="back_to_driver_cabinet")]
    ])

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å–æ–≤—ñ —Ä–∞–º–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑—É –∑–∞–º–æ–≤–ª–µ–Ω—å:
    # - –ù–µ —Ä–∞–Ω—ñ—à–µ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É (—â–æ–± –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –º–∏–Ω—É–ª—ñ)
    # - –ù–µ –ø—ñ–∑–Ω—ñ—à–µ, –Ω—ñ–∂ —á–µ—Ä–µ–∑ 48 –≥–æ–¥–∏–Ω (—â–æ–± –Ω–µ –∑–∞—Ö–∞—Ä–∞—â—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫)
    now = datetime.now(TIMEZONE)
    time_limit = now + timedelta(hours=48)
    
    min_time_str = now.strftime('%Y-%m-%d %H:%M:%S')
    max_time_str = time_limit.strftime('%Y-%m-%d %H:%M:%S')

    await show_paginated_list(
        target=target,
        page=page,
        count_func=db_queries.get_available_preorders_count,
        page_func=db_queries.get_available_preorders_page,
        keyboard_func=get_preorder_list_keyboard,
        title="üóìÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        items_per_page=PREORDERS_PER_PAGE,
        no_items_text="–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è –≤–∑—è—Ç—Ç—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å.",
        no_items_keyboard=no_items_kb,
        item_list_title="–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –¥–µ—Ç–∞–ª—ñ:",
        items_list_kwarg_name='orders',
        count_func_kwargs={'min_datetime': min_time_str, 'max_datetime': max_time_str},
        page_func_kwargs={'min_datetime': min_time_str, 'max_datetime': max_time_str}
    )

@router.message(F.text == 'üóìÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ')
async def scheduled_orders_list_handler(message: types.Message) -> None:
    """
    Handles the "Scheduled Orders" button.

    Args:
        message: The user's message.
    """
    await show_preorder_list_page(message, page=0)

@router.callback_query(Navigate.filter(F.to == "scheduled_orders_list"))
async def scheduled_orders_list_callback_handler(call: types.CallbackQuery) -> None:
    """
    Handles the "Back to Scheduled List" button from the details view.

    Args:
        call: The callback query.
    """
    await show_preorder_list_page(call, page=0)

@router.callback_query(PreOrderListPaginator.filter())
async def paginate_preorder_list(call: types.CallbackQuery, callback_data: PreOrderListPaginator) -> None:
    """
    Handles pagination for the available pre-orders list.

    Args:
        call: The callback query from pagination buttons.
        callback_data: The paginator callback data.
    """
    await show_preorder_list_page(call, page=callback_data.page)

@router.callback_query(PreOrderDetails.filter())
async def show_preorder_details(call: types.CallbackQuery, callback_data: PreOrderDetails) -> None:
    """
    Displays detailed information about a specific available pre-order.

    Args:
        call: The callback query from a specific pre-order button.
        callback_data: The callback data containing the order ID.
    """
    order = await db_queries.get_order_details(callback_data.order_id)
    if not order or order['status'] != 'scheduled':
        await call.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.", show_alert=True)
        await show_preorder_list_page(call, page=0)
        return

    time_str = parser.parse(order['scheduled_at']).strftime('%d.%m.%Y –æ %H:%M')
    details_text = (
        f"<b>–î–µ—Ç–∞–ª—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['id']}</b>\n\n"
        f"<b>–ß–∞—Å –ø–æ–¥–∞—á—ñ:</b> {time_str}\n"
        f"<b>–ó–≤—ñ–¥–∫–∏:</b> {html.escape(order['begin_address'])}\n"
        f"<b>–ö—É–¥–∏:</b> {html.escape(order['finish_address'])}\n"
    )
    if order['comment']:
        details_text += f"<b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> {html.escape(order['comment'])}\n"

    await safe_edit_or_send(call, details_text, reply_markup=get_preorder_details_keyboard(order['id']))
    await call.answer()

@router.callback_query(PreOrderAction.filter(F.action == 'accept'))
async def accept_preorder_handler(call: types.CallbackQuery, callback_data: PreOrderAction) -> None:
    """
    Handles a driver accepting a pre-order.

    Args:
        call: The callback query from the "Accept this order" button.
        callback_data: The callback data containing the order ID.
    """
    order_id = callback_data.order_id
    driver_id = call.from_user.id

    await db_queries.accept_preorder(order_id, driver_id)
    order = await db_queries.get_order_details(order_id)

    await call.answer("‚úÖ –í–∏ –≤–∑—è–ª–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!", show_alert=True)
    await safe_edit_or_send(call, f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id}.\n\n–ú–∏ –Ω–∞–≥–∞–¥–∞—î–º–æ –≤–∞–º –ø—Ä–æ –Ω—å–æ–≥–æ –∑–∞–≤—á–∞—Å–Ω–æ.")
    
    # Notify client
    if order and order['client_id']:
        await call.bot.send_message(order['client_id'], f"üéâ –ß—É–¥–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏! –ù–∞ –≤–∞—à–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –≤–∂–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤–æ–¥—ñ—è.")

# --- My Pre-Orders Handlers ---

MY_PREORDERS_PER_PAGE = 5

async def show_my_preorders_page(target: types.Message | types.CallbackQuery, page: int) -> None:
    """
    Displays a paginated list of the driver's own active pre-orders.
    """
    driver_id = target.from_user.id
    no_items_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤–æ–¥—ñ—è", callback_data="back_to_driver_cabinet")]
    ])

    await show_paginated_list(
        target=target,
        page=page,
        count_func=db_queries.get_my_preorders_count,
        page_func=db_queries.get_my_preorders_page,
        keyboard_func=get_my_preorders_keyboard,
        title="üóìÔ∏è –ú–æ—ó –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        items_per_page=MY_PREORDERS_PER_PAGE,
        no_items_text="–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∏–π–Ω—è—Ç–∏—Ö –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
        no_items_keyboard=no_items_kb,
        item_list_title="–í–∞—à—ñ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        items_list_kwarg_name='orders',
        count_func_kwargs={'driver_id': driver_id},
        page_func_kwargs={'driver_id': driver_id}
    )

@router.message(F.text == 'üóìÔ∏è –ú–æ—ó –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ')
async def my_scheduled_orders_handler(message: types.Message) -> None:
    """
    Handles the "My Scheduled Orders" button.
    """
    await show_my_preorders_page(message, page=0)

@router.callback_query(Navigate.filter(F.to == "my_scheduled_orders_list"))
async def my_scheduled_orders_callback_handler(call: types.CallbackQuery) -> None:
    """
    Handles the "Back to My Scheduled List" button.
    """
    await show_my_preorders_page(call, page=0)

@router.callback_query(MyPreordersPaginator.filter())
async def paginate_my_preorders(call: types.CallbackQuery, callback_data: MyPreordersPaginator) -> None:
    """
    Handles pagination for the driver's own pre-orders list.
    """
    await show_my_preorders_page(call, page=callback_data.page)

@router.callback_query(MyPreorderAction.filter(F.action == 'details'))
async def show_my_preorder_details(call: types.CallbackQuery, callback_data: MyPreorderAction) -> None:
    """
    Displays detailed information about a driver's own pre-order.
    """
    order = await db_queries.get_order_details(callback_data.order_id)
    if not order or order['driver_id'] != call.from_user.id or order['status'] != 'accepted_preorder':
        await call.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.", show_alert=True)
        await show_my_preorders_page(call, page=0)
        return

    time_str = parser.parse(order['scheduled_at']).strftime('%d.%m.%Y –æ %H:%M')
    details_text = (
        f"<b>–î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['id']}</b>\n\n"
        f"<b>–ß–∞—Å –ø–æ–¥–∞—á—ñ:</b> {time_str}\n"
        f"<b>–ó–≤—ñ–¥–∫–∏:</b> {html.escape(order['begin_address'])}\n"
        f"<b>–ö—É–¥–∏:</b> {html.escape(order['finish_address'])}\n"
    )
    if order['comment']:
        details_text += f"<b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> {html.escape(order['comment'])}\n"
    
    await safe_edit_or_send(call, details_text, reply_markup=get_my_preorder_details_keyboard(order['id']))
    await call.answer()

@router.callback_query(MyPreorderAction.filter(F.action == 'cancel'))
async def cancel_my_preorder_handler(call: types.CallbackQuery, callback_data: MyPreorderAction) -> None:
    """Handles a driver cancelling their own accepted pre-order."""
    client_id = await db_queries.cancel_preorder_by_driver(callback_data.order_id, call.from_user.id)
    if client_id:
        await call.answer("‚úîÔ∏è –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –í–æ–Ω–æ –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–µ –¥–ª—è —ñ–Ω—à–∏—Ö –≤–æ–¥—ñ—ó–≤.", show_alert=True)
        try:
            await call.bot.send_message(client_id, f"‚ùóÔ∏è –£–≤–∞–≥–∞! –í–æ–¥—ñ–π —Å–∫–∞—Å—É–≤–∞–≤ –≤–∞—à–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{callback_data.order_id}. –ú–∏ —Å–ø–æ–≤—ñ—Å—Ç–∏–º–æ –≤–∞—Å, –∫–æ–ª–∏ –π–æ–≥–æ –ø—Ä–∏–π–º–µ —ñ–Ω—à–∏–π –≤–æ–¥—ñ–π.")
        except Exception as e:
            logger.warning(f"Failed to send preorder cancellation notice to client {client_id}: {e}")
        await show_my_preorders_page(call, page=0)
    else:
        await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –≤–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–µ.", show_alert=True)
        await show_my_preorders_page(call, page=0)

# --- Driver Trip History Handlers ---

DRIVER_HISTORY_PER_PAGE = 5

async def show_driver_history_page(target: types.Message | types.CallbackQuery, page: int) -> None:
    """
    Displays a paginated list of the driver's completed trip history.

    Args:
        target: The message or callback object to answer to.
        page: The page number to display.
    """
    driver_id = target.from_user.id
    no_items_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤–æ–¥—ñ—è", callback_data="back_to_driver_cabinet")]
    ])

    await show_paginated_list(
        target=target, page=page,
        count_func=db_queries.get_driver_orders_count,
        page_func=db_queries.get_driver_orders_page,
        keyboard_func=get_driver_history_keyboard,
        title="üìñ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫", items_per_page=DRIVER_HISTORY_PER_PAGE,
        no_items_text='<b>üìñ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫</b>\n\n–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ø–æ—ó–∑–¥–æ–∫.',
        no_items_keyboard=no_items_kb,
        item_list_title="–û–±–µ—Ä—ñ—Ç—å –ø–æ—ó–∑–¥–∫—É, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ:",
        count_func_kwargs={'driver_id': driver_id}, page_func_kwargs={'driver_id': driver_id},
        items_list_kwarg_name='orders_on_page'
    )

@router.message(F.text == 'üìñ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫ –≤–æ–¥—ñ—è')
async def driver_history_handler(message: types.Message) -> None:
    """
    Handles the "Driver Trip History" button.

    Args:
        message: The user's message.
    """
    await show_driver_history_page(message, page=0)

@router.callback_query(DriverHistoryPaginator.filter())
async def paginate_driver_history(call: types.CallbackQuery, callback_data: DriverHistoryPaginator) -> None:
    """
    Handles pagination for the driver's trip history.

    Args:
        call: The callback query from pagination buttons.
        callback_data: The paginator callback data.
    """
    await show_driver_history_page(call, page=callback_data.page)

@router.callback_query(TripDetailsCallbackData.filter(), IsDriver())
async def show_driver_trip_details(call: types.CallbackQuery, callback_data: TripDetailsCallbackData) -> None:
    """
    Displays detailed information about a specific past trip for the driver.

    Args:
        call: The callback query from a specific trip button.
        callback_data: The callback data containing the order ID.
    """
    order_id = callback_data.order_id
    order_data = await db_queries.get_driver_trip_details(order_id, call.from_user.id)
    if not order_data:
        await call.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—é –ø–æ—ó–∑–¥–∫—É.", show_alert=True)
        return

    created_at_str = order_data['created_at'].split('.')[0]
    rating_text = f"{order_data['rating_score']} ‚≠ê" if order_data['is_rated'] and order_data['rating_score'] else "–ù–µ –æ—Ü—ñ–Ω–µ–Ω–æ"

    details_text = (
        f"<b>–î–µ—Ç–∞–ª—ñ –ø–æ—ó–∑–¥–∫–∏ ‚Ññ{order_id}</b>\n\n"
        f"<b>–î–∞—Ç–∞:</b> {created_at_str}\n"
        f"<b>–ó–≤—ñ–¥–∫–∏:</b> {html.escape(order_data['begin_address'])}\n"
        f"<b>–ö—É–¥–∏:</b> {html.escape(order_data['finish_address'])}\n\n"
        f"<b>--- –ö–ª—ñ—î–Ω—Ç ---</b>\n"
        f"<b>–Ü–º'—è:</b> {html.escape(order_data['client_name'])}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{html.escape(order_data['client_phone'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}</code>\n\n"
        f"<b>–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:</b> {rating_text}"
    )

    back_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó", callback_data=Navigate(to="driver_history_msg").pack())]
    ])
    
    # –ù–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ.
    # –ü–æ—ç—Ç–æ–º—É —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    await send_message_with_photo(call, TRIP_DETAILS_IMAGE_PATH, details_text, back_kb, delete_old=True)

    await call.answer()

@router.callback_query(Navigate.filter(F.to == "driver_history_msg"))
async def driver_history_msg_handler(call: types.CallbackQuery) -> None:
    """
    Handles the "Back to History" button from the trip details view.

    Args:
        call: The callback query.
    """
    await show_driver_history_page(call, page=0)

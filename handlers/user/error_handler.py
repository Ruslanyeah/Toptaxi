from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from loguru import logger
import html
import traceback
from config.config import ADMIN_IDS

router = Router()

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å –í–°–ï –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
@router.errors()
async def errors_handler(exception: types.ErrorEvent):
    """
    Catches all exceptions from routers and handlers.
    Logs the error and notifies admins.
    """
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    logger.exception(f"Cause exception: {exception.exception}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    tb_str = traceback.format_exception(type(exception.exception), exception.exception, exception.exception.__traceback__)
    error_text = "".join(tb_str)
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(error_text) > 4000:
        error_text = error_text[-4000:]
    error_message = f"<b>‚ùóÔ∏è Unhandled Error</b>\n\n<pre>{html.escape(error_text)}</pre>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await exception.update.bot.send_message(admin_id, error_message)
        except Exception as e:
            logger.error(f"Failed to send error notification to admin {admin_id}: {e}")

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if exception.update.callback_query:
        await exception.update.callback_query.message.answer("üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —ó—ó –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º.")
    elif exception.update.message:
        await exception.update.message.answer("üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —ó—ó –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º.")
    
    return True # –°–æ–æ–±—â–∞–µ–º aiogram, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞

@router.callback_query()
async def unhandled_callback_handler(callback: types.CallbackQuery):
    """
    –õ–æ–≤–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).
    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "–∑–∞–≤–∏—Å–∞–Ω–∏–µ" –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏.
    """
    # –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ callback –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: data='{callback.data}' –æ—Ç user_id={callback.from_user.id}")
    await callback.answer("–¶—è –∫–Ω–æ–ø–∫–∞ –≤–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞, –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.", show_alert=True)

@router.message()
async def unhandled_message_handler(message: types.Message, state: FSMContext) -> None:
    """
    Catches all unhandled text messages and always replies.
    """    
    logger.warning(f"Unhandled message: '{message.text}' from user_id={message.from_user.id}. Current state: {await state.get_state()}")
    await message.answer('–¢–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ –Ω–µ–º–∞—î :(\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ /start.')

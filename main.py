import asyncio
import logging
import signal
import sys
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from loguru import logger
from bot_manager import safe_bot_start
from aiogram.exceptions import TelegramConflictError
from config.config import TOKEN, ADMIN_IDS
from config.logging_config import setup_logging

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä—ñ–≤ ---
from database.db import init_db
from database import queries as db_queries
from handlers.middlewares.logging_middleware import LoggingMiddleware
from handlers.middlewares.activity_middleware import ActivityMiddleware
from handlers.middlewares.ban_middleware import BanMiddleware
from handlers import setup_routers
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from handlers.user.scheduler import check_scheduled_orders, check_dispatch_timeouts, check_preorder_reminders, check_pending_dispatch_orders

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
bot = None
scheduler = None

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
setup_logging()

async def set_bot_commands(bot: Bot):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    user_commands = [
        BotCommand(command="start", description="üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É / –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
        BotCommand(command="cabinet", description="üè† –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç"),
        BotCommand(command="driver", description="üöï –ö–∞–±—ñ–Ω–µ—Ç –≤–æ–¥—ñ—è"),
        BotCommand(command="stop", description="üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é"),
    ]
    await bot.set_my_commands(user_commands, BotCommandScopeDefault())

    admin_commands = user_commands + [
        BotCommand(command="admin", description="üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"),
    ]

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (–∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö)
    all_admin_ids = set(ADMIN_IDS)
    db_admins = await db_queries.get_all_admins()
    if db_admins:
        for admin in db_admins:
            all_admin_ids.add(admin['user_id'])

    for admin_id in all_admin_ids:
        try:
            await bot.set_my_commands(admin_commands, BotCommandScopeChat(chat_id=admin_id))
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

async def graceful_shutdown(dp: Dispatcher):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    global bot, scheduler # –£–±–∏—Ä–∞–µ–º dp –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    
    logger.info("–ü–æ—á–∞—Ç–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
    
    if scheduler and scheduler.running:
        try:
            scheduler.shutdown(wait=True)
            logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
    
    if dp:
        try:
            await dp.stop_polling()
            logger.info("Polling –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ polling: {e}")
    if dp:
        try:
            await dp.fsm.storage.close()
            logger.info("FSM —Å—Ö–æ–≤–∏—â–µ –∑–∞–∫—Ä–∏—Ç–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ FSM —Å—Ö–æ–≤–∏—â–∞: {e}")
    
    if bot:
        try:
            await bot.close()
            logger.info("–°–µ—Å—ñ—è –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–∞")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å–µ—Å—ñ—ó –±–æ—Ç–∞: {e}")
    
    logger.info("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

async def start_bot(dp: Dispatcher):
    global bot, scheduler
    
    bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    bot_info = await bot.get_me()

    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    # —ñ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–ø—É—Å–∫ –±—ñ–ª—å—à "–≤—ñ–¥—á—É—Ç–Ω–∏–º" –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–µ–±—Ö—É–∫: {e}")

    logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    await init_db()
    logger.info("–ë–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –≥—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    # –¶–µ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–π —Å–ø–æ—Å—ñ–± –¥–ª—è asyncio, –Ω—ñ–∂ signal.signal
    loop = asyncio.get_running_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, lambda: asyncio.create_task(graceful_shutdown(dp)))
        except NotImplementedError:
            # –ù–∞ Windows –º–æ–∂–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è –¥–ª—è SIGTERM
            pass

    scheduler = AsyncIOScheduler(timezone="Europe/Kiev")
    scheduler.add_job(check_scheduled_orders, trigger='interval', seconds=60, kwargs={'bot': bot})
    scheduler.add_job(check_dispatch_timeouts, trigger='interval', seconds=5, kwargs={'bot': bot})
    scheduler.add_job(check_pending_dispatch_orders, trigger='interval', seconds=60, kwargs={'bot': bot})
    scheduler.add_job(check_preorder_reminders, trigger='interval', minutes=1, kwargs={'bot': bot})
    scheduler.start()
    
    await set_bot_commands(bot)

    dp.message.middleware(BanMiddleware())
    # –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ –≤—Å–µ–º —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
    dp.update.outer_middleware(LoggingMiddleware())
    dp.update.outer_middleware(ActivityMiddleware()) # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    dp.callback_query.middleware(BanMiddleware())
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except TelegramConflictError:
        logger.critical(
            f"–í–∏—è–≤–ª–µ–Ω–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç –¥–ª—è –±–æ—Ç–∞ @{bot_info.username} (ID: {bot_info.id}).\n"
            "–Ü–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π.\n"
            "–©–æ–± —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏, –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç: python stop_bot.py –∞–±–æ python quick_stop.py"
        )
    except Exception as e:
        await graceful_shutdown(dp)
        raise e

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Dispatcher –∑–¥–µ—Å—å, –∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
    dp = Dispatcher()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    main_commands_router, other_handlers_router, errors_router = setup_routers()
    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    dp.include_router(main_commands_router)
    # –ó–∞—Ç–µ–º - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(other_handlers_router)
    # –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    dp.include_router(errors_router)

    # –ü–µ—Ä–µ–¥–∞–µ–º dp –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    await safe_bot_start(lambda: start_bot(dp))

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio.run() –æ–±—Ä–æ–±–ª—è—î KeyboardInterrupt —Ç–∞ —ñ–Ω—à—ñ –≤–∏–Ω—è—Ç–∫–∏
    asyncio.run(main())

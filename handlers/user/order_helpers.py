from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
import html
from keyboards.reply_keyboards import (
    main_menu_keyboard, comment_skip_keyboard, phone_request_keyboard, build_address_input_keyboard,
    build_destination_address_keyboard, order_confirm_keyboard
)
from dateutil import parser
from utils.callback_factories import ConfirmUnfoundAddress
from database import queries as db_queries # Keep this import
from utils.validators import is_valid_phone
from loguru import logger

async def validate_addresses(message: types.Message, state: FSMContext, data: dict) -> bool:
    """
    Validates begin and finish addresses for an order.
    Returns True if valid, False otherwise (and sends an error message).
    """
    begin_address = data.get('begin_address')
    finish_address = data.get('finish_address')

    if not begin_address or not finish_address:
        await message.answer(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> –ê–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á—ñ –∞–±–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_keyboard
        )
        await state.clear()
        return False

    if begin_address == finish_address and finish_address != "–ó–∞ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è–º –∑ –≤–æ–¥—ñ—î–º":
        await message.answer(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> –ê–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á—ñ —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_keyboard
        )
        await state.clear()
        return False
    
    return True

def _shorten_address(full_address: str) -> str:
    """Removes redundant parts like region or district from the address string."""
    if not full_address:
        return ""
    parts_to_remove = ["–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å, ", "–ì–ª—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω, ", "–º—ñ—Å—Ç–æ –ì–ª—É—Ö—ñ–≤, ", "–ì–ª—É—Ö—ñ–≤, "]
    for part in parts_to_remove:
        if full_address.startswith(part):
            return full_address.replace(part, '', 1).strip()
    return full_address

async def validate_order_data(data: dict) -> tuple[bool, str]:
    """
    Validates the collected order data before creating the order.
    Returns a tuple (is_valid, error_message).
    """
    order_type = data.get('order_type', 'taxi')

    if not data.get('number'):
        return False, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ."

    if order_type == 'taxi' or order_type == 'pickup_delivery':
        if not data.get('begin_address') or not data.get('finish_address'):
            return False, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –∞–±–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ."
        if data.get('begin_address') == data.get('finish_address') and data.get('finish_address') != "–ó–∞ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è–º –∑ –≤–æ–¥—ñ—î–º":
            return False, "‚ùå –ü–æ–º–∏–ª–∫–∞: –ê–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á—ñ —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ."
    
    if order_type == 'buy_delivery':
        if not data.get('finish_address'):
            return False, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ."
        if not data.get('order_details'):
            return False, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫—É–ø–∏—Ç–∏. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ."

    if order_type == 'pickup_delivery' and not data.get('order_details'):
        return False, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–µ–∑—Ç–∏. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ."

    return True, ""

def format_confirmation_text(data: dict, is_final: bool = False) -> str:
    """
    Generates a formatted text string for order confirmation or final success message.
    """
    from dateutil import parser

    order_type = data.get('order_type', 'taxi')
    
    header = "‚úÖ <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n" if is_final else "üìù <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
    if is_final:
        if order_type in ['buy_delivery', 'pickup_delivery']: header = "‚úÖ <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
        elif data.get('is_preorder'): header = "‚úÖ <b>–í–∞—à–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        footer = "\n<i>–ú–∏ –ø–æ—á–∞–ª–∏ –ø–æ—à—É–∫ –≤–æ–¥—ñ—è. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.</i>"
        if data.get('is_preorder'): footer = "\n<i>–ú–∏ –ø–æ—á–Ω–µ–º–æ —à—É–∫–∞—Ç–∏ –≤–æ–¥—ñ—è –∑–∞–≤—á–∞—Å–Ω–æ, —â–æ–± –ø–æ–¥–∞—Ç–∏ –º–∞—à–∏–Ω—É –≤—á–∞—Å–Ω–æ.</i>"
    else:
        footer = "\n<i>–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.</i>"

    body = ""
    if data.get('is_preorder'): body += f"<b>–ß–∞—Å –ø–æ–¥–∞—á—ñ:</b> {parser.parse(data.get('scheduled_at')).strftime('%d.%m.%Y –æ %H:%M')}\n"
    if order_type == 'taxi': body += f"<b>–ó–≤—ñ–¥–∫–∏:</b> {html.escape(str(data.get('begin_address')))}\n<b>–ö—É–¥–∏:</b> {html.escape(str(data.get('finish_address')))}\n"
    elif order_type == 'voice_taxi': body += f"<b>–ó–≤—ñ–¥–∫–∏:</b> üéôÔ∏è –ê–¥—Ä–µ—Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≥–æ–ª–æ—Å–æ–º\n<b>–ö—É–¥–∏:</b> üéôÔ∏è –ê–¥—Ä–µ—Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≥–æ–ª–æ—Å–æ–º\n"
    elif order_type == 'buy_delivery': body += f"<b>–¢–∏–ø:</b> –ö—É–ø–∏—Ç–∏ —ñ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏\n<b>–©–æ –∫—É–ø–∏—Ç–∏:</b> {html.escape(str(data.get('order_details')))}\n<b>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {html.escape(_shorten_address(data.get('finish_address', '')))}\n"
    elif order_type == 'pickup_delivery': body += f"<b>–¢–∏–ø:</b> –ó–∞–±—Ä–∞—Ç–∏ —ñ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏\n<b>–ó–≤—ñ–¥–∫–∏:</b> {html.escape(str(data.get('begin_address')))}\n<b>–ö—É–¥–∏:</b> {html.escape(str(data.get('finish_address')))}\n<b>–©–æ –≤–µ–∑—Ç–∏:</b> {html.escape(str(data.get('order_details')))}\n"
    if data.get('comment'): body += f"<b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> {html.escape(str(data.get('comment')))}\n"
    if data.get('number'): body += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.escape(str(data.get('number')))}\n"

    return header + body + footer

async def show_unified_confirmation(message: types.Message, state: FSMContext, next_state: State):
    """
    A unified helper to show the confirmation screen for any order type.
    """
    from keyboards.reply_keyboards import order_confirm_keyboard
    data = await state.get_data()
    confirmation_text = format_confirmation_text(data, is_final=False)
    await message.answer(confirmation_text, reply_markup=order_confirm_keyboard)
    await state.set_state(next_state)

async def _go_to_begin_address_step(target: types.Message | types.CallbackQuery, state: FSMContext):
    """Moves the FSM to the start address input step."""
    try:
        current_state_str = await state.get_state()
        if not current_state_str:
            logger.warning("Cannot go to begin address step: state is None.")
            return

        current_state_group_name = current_state_str.split(':')[0]
        states = globals().get(current_state_group_name)
        if not states: # Fallback
            from states.fsm_states import UserState
            states = UserState

        await state.set_state(states.locate)
        fav_addresses = await db_queries.get_user_fav_addresses(target.from_user.id)

        message_target = target.message if isinstance(target, types.CallbackQuery) else target
        await message_target.answer(
            'üìç <b>–ö—Ä–æ–∫ 1: –ê–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á—ñ</b>\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏:',
            reply_markup=build_address_input_keyboard(fav_addresses)
        )
    except Exception as e:
        logger.exception(f"Error in _go_to_begin_address_step: {e}")

async def _go_to_finish_address_step(target: types.Message | types.CallbackQuery, state: FSMContext):
    """Moves the FSM to the destination address input step."""
    try:
        current_state_str = await state.get_state()
        if not current_state_str:
            logger.warning("Cannot go to finish address step: state is None.")
            return

        current_state_group_name = current_state_str.split(':')[0]
        from states import fsm_states
        states = getattr(fsm_states, current_state_group_name, fsm_states.UserState)
        if not states: # Fallback
            from states.fsm_states import UserState
            states = UserState
        
        # Only set the state if we are not already in a more specific sub-state
        # Always set the state to finish_address when moving to this step.
        await state.set_state(states.finish_address)

        data = await state.get_data()
        fav_addresses = await db_queries.get_user_fav_addresses(target.from_user.id)
        is_preorder = data.get('is_preorder', False)
        step_num = "3" if is_preorder else "2"
        
        message_target = target.message if isinstance(target, types.CallbackQuery) else target
        # Use .answer() for new messages, not .reply()
        await message_target.answer(
            f'üèÅ <b>–ö—Ä–æ–∫ {step_num}: –ê–¥—Ä–µ—Å–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è</b>\n\n–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å, <b>–ö–£–î–ò</b> –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–≤–µ–∑—Ç–∏',
            reply_markup=build_destination_address_keyboard(fav_addresses)
        )
    except Exception as e:
        logger.exception(f"Error in _go_to_finish_address_step: {e}")

async def _go_to_phone_number_step(target: types.Message | types.CallbackQuery, state: FSMContext):
    """Moves the FSM to the phone number input step."""
    message_target = target.message if isinstance(target, types.CallbackQuery) else target
    
    current_state_str = await state.get_state()
    current_state_group_name = current_state_str.split(':')[0]
    states = globals().get(current_state_group_name)
    if not states: # Fallback
        from states.fsm_states import UserState
        states = UserState

    next_state = states.number if hasattr(states, 'number') else states.get_phone
    await state.set_state(next_state)
    await message_target.answer(
        'üì± <b>–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤\'—è–∑–∫—É –∑ –≤–æ–¥—ñ—î–º.',
        reply_markup=phone_request_keyboard
    )

async def process_phone_input(
    message: types.Message,
    state: FSMContext,
    next_state: State
) -> None:
    """
    Processes user's phone number from text or contact and moves to the next state.
    """
    phone_number = message.contact.phone_number if message.contact else message.text

    if is_valid_phone(phone_number):
        await state.update_data(number=phone_number)
        await db_queries.update_client_phone(message.from_user.id, phone_number)
        # After phone, always go to comment state
        await state.set_state(next_state) # This should be the comment state
        await message.answer(
            f"üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)\n\n"
            "–ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—É–¥—å-—è–∫—É –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤–æ–¥—ñ—è.",
            reply_markup=comment_skip_keyboard
        )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É.</b>\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É 'üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É'.",
            reply_markup=phone_request_keyboard
        )

async def process_voice_comment_input(
    message: types.Message, 
    state: FSMContext, 
    next_state: State
) -> None:
    """
    Processes user's phone number from text or contact and moves to the next state.
    """
    await state.update_data(comment="üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä", comment_voice_id=message.voice.file_id)
    await message.answer("‚úÖ –í–∞—à –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    # After voice comment, go to confirmation
    await show_unified_confirmation(message, state, next_state)

from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from states.fsm_states import VoiceOrderState
from keyboards.reply_keyboards import (
    fsm_cancel_keyboard, location_or_skip_keyboard, main_menu_keyboard, phone_request_keyboard
)
from database import queries as db_queries
from .order_dispatch import dispatch_order_to_drivers
from .order_helpers import _go_to_phone_number_step
from utils.validators import is_valid_phone

router = Router()

@router.message(F.text == 'üéôÔ∏è –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–º')
async def start_voice_order(message: types.Message, state: FSMContext):
    """
    Starts the multi-step voice order process.
    """
    await state.clear()
    await state.set_state(VoiceOrderState.get_voice)
    await message.answer(
        "<b>üéôÔ∏è –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–º (–ö—Ä–æ–∫ 1/3)</b>\n\n"
        "–ó–∞–ø–∏—à—ñ—Ç—å –æ–¥–Ω–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤ —è–∫–æ–º—É —Å–∫–∞–∂—ñ—Ç—å, <b>–∑–≤—ñ–¥–∫–∏ —ñ –∫—É–¥–∏</b> –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —ó—Ö–∞—Ç–∏.\n\n"
        "<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥: ¬´–î–æ–±—Ä–∏–π –¥–µ–Ω—å, –ø–æ—Ç—Ä—ñ–±–Ω–µ —Ç–∞–∫—Å—ñ –≤—ñ–¥ –≤—É–ª–∏—Ü—ñ –ö–∏—ó–≤—Å—å–∫–∞ 1 –¥–æ –í–æ–∫–∑–∞–ª—É¬ª.</i>",
        reply_markup=fsm_cancel_keyboard
    )

@router.message(VoiceOrderState.get_voice, F.voice)
async def process_voice_message(message: types.Message, state: FSMContext):
    """
    Receives the voice message and asks for optional location.
    """
    await state.update_data(begin_address_voice_id=message.voice.file_id)
    await state.set_state(VoiceOrderState.get_location)
    await message.answer(
        "<b>–ö—Ä–æ–∫ 2/3: –í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</b>\n\n"
        "–©–æ–± –≤–æ–¥—ñ—é –±—É–ª–æ –ª–µ–≥—à–µ –≤–∞—Å –∑–Ω–∞–π—Ç–∏, –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é. "
        "–ê–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫.",
        reply_markup=location_or_skip_keyboard
    )

@router.message(VoiceOrderState.get_voice)
async def wrong_input_for_voice(message: types.Message):
    """Catches any input other than a voice message at the first step."""
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ <b>–≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

@router.message(VoiceOrderState.get_location, F.location)
async def process_location(message: types.Message, state: FSMContext):
    """Processes the location and asks for the phone number."""
    await state.update_data(latitude=message.location.latitude, longitude=message.location.longitude)
    await message.answer("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ.")
    await state.set_state(VoiceOrderState.get_number)
    await message.answer(
        'üì± <b>–ö—Ä–æ–∫ 3/3: –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤\'—è–∑–∫—É –∑ –≤–æ–¥—ñ—î–º.',
        reply_markup=phone_request_keyboard
    )

@router.message(VoiceOrderState.get_location, F.text == '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏')
async def skip_location(message: types.Message, state: FSMContext):
    """Skips the location step and asks for the phone number."""
    await state.set_state(VoiceOrderState.get_number)
    await message.answer(
        'üì± <b>–ö—Ä–æ–∫ 3/3: –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤\'—è–∑–∫—É –∑ –≤–æ–¥—ñ—î–º.',
        reply_markup=phone_request_keyboard
    )

@router.message(VoiceOrderState.get_location)
async def wrong_input_for_location(message: types.Message):
    """Catches incorrect input at the location step."""
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é' –∞–±–æ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.")

@router.message(VoiceOrderState.get_number, (F.contact | F.text))
async def process_phone_and_create_order(message: types.Message, state: FSMContext):
    """Processes the phone number, creates, and dispatches the order."""
    phone_number = message.contact.phone_number if message.contact else message.text

    if not is_valid_phone(phone_number):
        await message.answer("‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É.</b>\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.")
        return

    await state.update_data(number=phone_number)
    await db_queries.update_client_phone(message.from_user.id, phone_number)

    user_data = await state.get_data()
    # Finalize data for order creation
    final_order_data = {
        'order_type': 'single_voice_order',
        'begin_address': "üìç –ê–¥—Ä–µ—Å–∞ —É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ",
        'finish_address': "üìç –ê–¥—Ä–µ—Å–∞ —É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ",
        'begin_address_voice_id': user_data.get('begin_address_voice_id'),
        'latitude': user_data.get('latitude'),
        'longitude': user_data.get('longitude'),
        'number': user_data.get('number')
    }

    order_id = await db_queries.create_order_in_db(message.from_user.id, final_order_data, initial_status='searching')
    if not order_id:
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_keyboard)
    else:
        await dispatch_order_to_drivers(message.bot, order_id, final_order_data, message.from_user)
        await message.answer(
            "‚úÖ <b>–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
            "<i>–ú–∏ –ø–æ—á–∞–ª–∏ –ø–æ—à—É–∫ –≤–æ–¥—ñ—è. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.</i>",
            reply_markup=main_menu_keyboard
        )
    
    await state.clear()
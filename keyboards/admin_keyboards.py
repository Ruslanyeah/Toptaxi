from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dateutil import parser
from utils.callback_factories import *
from .common import Navigate, _add_pagination_buttons
import html
from datetime import datetime, timedelta
from config.config import ADMIN_IDS

def get_admin_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üì£ –†–æ–∑—Å–∏–ª–∫–∞', callback_data=Navigate(to='news'))
    builder.button(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', callback_data=Navigate(to='analytics_menu'))
    builder.button(text='üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥—ñ—ó–≤', callback_data=Navigate(to='drivers_list'))
    builder.button(text='üö¶ –í–æ–¥—ñ—ó –Ω–∞ –∑–º—ñ–Ω—ñ', callback_data=Navigate(to='working_drivers_list'))
    builder.button(text='‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏', callback_data=Navigate(to='user_management'))
    builder.button(text='üóÇÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏', callback_data=Navigate(to='order_management'))
    builder.button(text='üëë –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º–∏', callback_data=Navigate(to='admin_management'))
    builder.adjust(2, 1, 2, 1)
    return builder.as_markup()

def get_newsletter_audience_keyboard(counts: dict[str, int]) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=f"üë• –í—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º ({counts.get('all', 0)})", callback_data=Navigate(to='nl_audience_all'))
    builder.button(text=f"üë§ –¢—ñ–ª—å–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞–º ({counts.get('clients', 0)})", callback_data=Navigate(to='nl_audience_clients'))
    builder.button(text=f"üöï –¢—ñ–ª—å–∫–∏ –≤–æ–¥—ñ—è–º ({counts.get('drivers', 0)})", callback_data=Navigate(to='nl_audience_drivers'))
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ', callback_data=Navigate(to='admin_panel'))
    builder.adjust(1)
    return builder.as_markup()

def get_newsletter_confirm_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏', callback_data=Navigate(to='nl_confirm_send'))
    builder.button(text='‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', callback_data=Navigate(to='nl_change_message'))
    builder.button(text='üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É', callback_data=Navigate(to='admin_panel'))
    return builder.as_markup()

def get_admin_management_keyboard(admins: list) -> types.InlineKeyboardMarkup:
    """Generates a keyboard for the admin management menu."""
    builder = InlineKeyboardBuilder()
    if admins:
        builder.button(text="--- –ü–æ—Ç–æ—á–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ ---", callback_data="noop") # No-op button as a header
        for admin in admins:
            builder.button(
                text=f"‚ûñ {html.escape(admin['full_name'])}",
                callback_data=AdminAction(action='remove_admin', target_id=admin['user_id'])
            )
    builder.button(text='‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=AdminAction(action='add_admin_start'))
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ', callback_data=Navigate(to='admin_panel'))
    builder.adjust(1)
    return builder.as_markup()

def get_analytics_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=Navigate(to='general_stats'))
    builder.button(text='üìà –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–æ–¥—ñ—ó–≤', callback_data=Navigate(to='drivers_kpi'))
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ', callback_data=Navigate(to='admin_panel'))
    builder.adjust(1)
    return builder.as_markup()

def get_analytics_period_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üìÖ –ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', callback_data=Navigate(to='stats_period_today'))
    builder.button(text='üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å', callback_data=Navigate(to='stats_period_week'))
    builder.button(text='üìÖ –ó–∞ –º—ñ—Å—è—Ü—å', callback_data=Navigate(to='stats_period_month'))
    builder.button(text='üóìÔ∏è –í–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥', callback_data=Navigate(to='stats_period_custom'))
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏', callback_data=Navigate(to='analytics_menu'))
    builder.adjust(1)
    return builder.as_markup()

def get_drivers_kpi_keyboard(page: int, total_pages: int) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É KPI –≤–æ–¥—ñ—ó–≤."""
    builder = InlineKeyboardBuilder()
    pagination_row_size = _add_pagination_buttons(builder, page, total_pages, KpiPaginator)
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏', callback_data=Navigate(to='analytics_menu'))
    if pagination_row_size > 0:
        builder.adjust(pagination_row_size, 1)
    else:
        builder.adjust(1)
    return builder.as_markup()

def get_order_management_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ö° –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data=Navigate(to='active_orders_list'))
    builder.button(text='üóÇÔ∏è –í—Å—è —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å', callback_data=Navigate(to='all_orders_history'))
    builder.button(text='üîé –ó–Ω–∞–π—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ –∫–ª—ñ—î–Ω—Ç—É', callback_data=Navigate(to='search_order_by_client'))
    builder.button(text='üîé –ó–Ω–∞–π—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ ID', callback_data=Navigate(to='search_order_by_id'))
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ', callback_data=Navigate(to='admin_panel'))
    builder.adjust(1)
    return builder.as_markup()

def get_user_management_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', callback_data=Navigate(to='clients_list'))
    builder.button(text='üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', callback_data=Navigate(to='banned_clients_list'))
    builder.button(text='‚ÑπÔ∏è –Ü–Ω—Ñ–æ –ø–æ ID', callback_data=Navigate(to='get_user_info'))
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ', callback_data=Navigate(to='admin_panel'))
    builder.adjust(1)
    return builder.as_markup()

def get_drivers_list_keyboard(page: int, total_pages: int, drivers: list) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É –≤–æ–¥—ñ—ó–≤."""
    builder = InlineKeyboardBuilder()
    for driver in drivers:
        builder.button(
            text=f"üë§ {driver['full_name']}",
            callback_data=DriverProfile(user_id=driver['user_id'])
        )
    
    pagination_row_size = _add_pagination_buttons(builder, page, total_pages, Paginator)
    builder.button(text='‚ûï –î–æ–¥–∞—Ç–∏ –≤–æ–¥—ñ—è', callback_data=Navigate(to='add_driver_start'))
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ', callback_data=Navigate(to='admin_panel'))

    layout = [1] * len(drivers)
    if pagination_row_size > 0: layout.append(pagination_row_size)
    layout.extend([1, 1])
    builder.adjust(*layout)
    return builder.as_markup()

def get_working_drivers_keyboard(page: int, total_pages: int, drivers: list) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É –≤–æ–¥—ñ—ó–≤ –Ω–∞ –∑–º—ñ–Ω—ñ."""
    builder = InlineKeyboardBuilder()
    for driver in drivers:
        builder.button(
            text=f"üë§ {driver['full_name']}",
            callback_data=DriverProfile(user_id=driver['user_id'])
        )

    pagination_row_size = _add_pagination_buttons(builder, page, total_pages, WorkingDriversPaginator)
    builder.button(text='‚Ü©Ô∏è –î–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ', callback_data=Navigate(to='admin_panel'))

    layout = [1] * len(drivers)
    if pagination_row_size > 0: layout.append(pagination_row_size)
    layout.append(1)
    builder.adjust(*layout)
    return builder.as_markup()

def get_clients_list_keyboard(page: int, total_pages: int, clients: list, search_active: bool = False) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤."""
    builder = InlineKeyboardBuilder()
    for client in clients:
        builder.button(
            text=f"üë§ {html.escape(client['full_name'] or '–Ü–º`—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}",
            callback_data=ClientProfile(user_id=client['user_id'])
        )
    
    pagination_row_size = _add_pagination_buttons(builder, page, total_pages, ClientPaginator)
    if search_active:
        builder.button(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫', callback_data=Navigate(to='clients_list'))
    else:
        builder.button(text='üîé –ü–æ—à—É–∫', callback_data=Navigate(to='start_client_search'))

    builder.button(text='‚Ü©Ô∏è –î–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è', callback_data=Navigate(to='user_management'))
    
    layout = [1] * len(clients)
    if pagination_row_size > 0: layout.append(pagination_row_size)
    layout.extend([1, 1])
    builder.adjust(*layout)
    return builder.as_markup()

def get_client_profile_keyboard(user_id: int, is_banned: bool, is_admin: bool) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥—ñ–π."""
    builder = InlineKeyboardBuilder()
    if is_banned:
        builder.button(
            text="‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=AdminClientAction(action='unban', user_id=user_id)
        )
    else:
        builder.button(
            text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=AdminClientAction(action='ban', user_id=user_id)
        )
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫—â–æ —Ü–µ –Ω–µ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω
    if user_id not in ADMIN_IDS:
        if is_admin:
            builder.button(text="üëë –ó–∞–±—Ä–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞", callback_data=AdminAction(action='toggle_admin', target_id=user_id))
        else:
            builder.button(text="üëë –ù–∞–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞", callback_data=AdminAction(action='toggle_admin', target_id=user_id))

    builder.button(text="‚úâÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data=AdminClientAction(action='send_message', user_id=user_id))
    builder.button(text="üìñ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data=ClientHistory(user_id=user_id))
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data=Navigate(to='clients_list'))
    builder.adjust(1)
    return builder.as_markup()

def get_client_history_keyboard(page: int, total_pages: int, orders: list, client_id: int) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–ª—ñ—î–Ω—Ç–∞."""
    builder = InlineKeyboardBuilder()
    status_emoji = {
        'completed': '‚úÖ', 'cancelled_by_user': '‚ùå', 'cancelled_by_driver': '‚ùå',
        'cancelled_by_admin': '‚ùå', 'cancelled_no_drivers': 'ü§∑', 'searching': 'üîé',
        'accepted': 'üëç', 'in_progress': 'üöó', 'scheduled': 'üìÖ'
    }
    for order in orders:
        emoji = status_emoji.get(order['status'], '‚ùì')
        date_str = parser.parse(order['created_at']).strftime('%d.%m %H:%M')
        builder.button(
            text=f"{emoji} ‚Ññ{order['id']} –≤—ñ–¥ {date_str}",
            callback_data=AdminOrderDetails(order_id=order['id'])
        )

    pagination_row_size = _add_pagination_buttons(builder, page, total_pages, ClientHistoryPaginator, user_id=client_id)
    builder.button(text="‚Ü©Ô∏è –î–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=ClientProfile(user_id=client_id))

    layout = [1] * len(orders)
    if pagination_row_size > 0: layout.append(pagination_row_size)
    layout.append(1)
    builder.adjust(*layout)
    return builder.as_markup()

def get_driver_profile_keyboard(user_id: int, on_shift: bool, is_available: bool) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not on_shift:
        builder.button(text="üöÄ –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É", callback_data=AdminDriverAction(action='force_start_shift', user_id=user_id))
    else:
        if is_available:
            builder.button(text="‚è∏Ô∏è –ó—Ä–æ–±–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º", callback_data=AdminDriverAction(action='set_unavailable', user_id=user_id))
        else:
            builder.button(text="‚ñ∂Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data=AdminDriverAction(action='set_available', user_id=user_id))
        builder.button(text="‚õîÔ∏è –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É", callback_data=AdminDriverAction(action='force_stop_shift', user_id=user_id))

    if on_shift:
        builder.button(text="üìç –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data=AdminShowLocation(user_id=user_id))
    else:
        builder.button(text="üìç –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é (–Ω–µ –Ω–∞ –∑–º—ñ–Ω—ñ)", callback_data=AdminRequestLocation(user_id=user_id))
    
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ", callback_data=AdminDriverAction(action='edit_details', user_id=user_id))
    builder.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤–æ–¥—ñ—è", callback_data=AdminDriverAction(action='delete_start', user_id=user_id))
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data=Navigate(to='drivers_list'))
    builder.adjust(1)
    return builder.as_markup()

def get_working_driver_profile_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–æ–¥—ñ—è, –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É '–Ω–∞ –∑–º—ñ–Ω—ñ'."""
    builder = InlineKeyboardBuilder()
    # –û—Å–∫—ñ–ª—å–∫–∏ –≤–æ–¥—ñ–π –Ω–∞ –∑–º—ñ–Ω—ñ, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –¥—ñ—ó
    builder.button(text="‚õîÔ∏è –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É", callback_data=AdminDriverAction(action='force_stop_shift', user_id=user_id))
    builder.button(text="üìç –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data=AdminShowLocation(user_id=user_id))
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ", callback_data=AdminDriverAction(action='edit_details', user_id=user_id))
    builder.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤–æ–¥—ñ—è", callback_data=AdminDriverAction(action='delete_start', user_id=user_id))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ —Å–ø–∏—Å–∫—É –≤–æ–¥—ñ—ó–≤ –Ω–∞ –∑–º—ñ–Ω—ñ
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data=Navigate(to='working_drivers_list'))
    builder.adjust(1)
    return builder.as_markup()

def get_banned_clients_list_keyboard(page: int, total_pages: int, clients: list) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫—É –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤."""
    builder = InlineKeyboardBuilder()
    for client in clients:
        builder.button(
            text=f"üë§ {html.escape(client['full_name'] or '–Ü–º`—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}",
            callback_data=ClientProfile(user_id=client['user_id'])
        )
    
    pagination_row_size = _add_pagination_buttons(builder, page, total_pages, BannedClientPaginator)
    builder.button(text='‚Ü©Ô∏è –î–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏', callback_data=Navigate(to='user_management'))

    layout = [1] * len(clients)
    if pagination_row_size > 0: layout.append(pagination_row_size)
    layout.append(1)
    builder.adjust(*layout)
    return builder.as_markup()

def get_active_orders_keyboard(page: int, total_pages: int, orders_on_page: list) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å (–∞–¥–º—ñ–Ω)."""
    builder = InlineKeyboardBuilder()
    status_emoji = {
        'searching': 'üîé', 'accepted': 'üëç', 'in_progress': 'üöó', 'scheduled': 'üìÖ'
    }
    for order in orders_on_page:
        emoji = status_emoji.get(order['status'], '‚ùì')
        date_str = parser.parse(order['created_at']).strftime('%d.%m %H:%M')
        builder.button(
            text=f"{emoji} ‚Ññ{order['id']} –≤—ñ–¥ {date_str}",
            callback_data=AdminOrderDetails(order_id=order['id'])
        )

    pagination_row_size = _add_pagination_buttons(builder, page, total_pages, AdminOrderPaginator)
    builder.button(text="‚Ü©Ô∏è –î–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏", callback_data=Navigate(to="order_management"))

    layout = [1] * len(orders_on_page)
    if pagination_row_size > 0: layout.append(pagination_row_size)
    layout.append(1)
    builder.adjust(*layout)
    return builder.as_markup()

def get_admin_order_keyboard(order_id: int, status: str) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º (–∞–¥–º—ñ–Ω)."""
    builder = InlineKeyboardBuilder()
    # –î–æ–∑–≤–æ–ª–∏—Ç–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è/–ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ
    if status in ['searching', 'accepted', 'in_progress', 'scheduled']:
        builder.button(
            text="üîÑ –ü–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–æ–¥—ñ—è",
            callback_data=AdminOrderAction(action='reassign_order', order_id=order_id)
        )
        builder.button(
            text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
            callback_data=AdminOrderAction(action='cancel_order', order_id=order_id)
        )
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏", callback_data=Navigate(to="order_management"))
    builder.adjust(1)
    return builder.as_markup()

def get_all_orders_keyboard(page: int, total_pages: int, orders: list) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤—Å—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å (–∞–¥–º—ñ–Ω)."""
    builder = InlineKeyboardBuilder()
    status_emoji = {
        'completed': '‚úÖ', 'cancelled_by_user': '‚ùå', 'cancelled_by_driver': '‚ùå',
        'cancelled_by_admin': '‚ùå', 'cancelled_no_drivers': 'ü§∑', 'searching': 'üîé',
        'accepted': 'üëç', 'in_progress': 'üöó', 'scheduled': 'üìÖ'
    }
    for order in orders:
        emoji = status_emoji.get(order['status'], '‚ùì')
        date_str = parser.parse(order['created_at']).strftime('%d.%m %H:%M')
        builder.button(
            text=f"{emoji} ‚Ññ{order['id']} –≤—ñ–¥ {date_str}",
            callback_data=AdminOrderDetails(order_id=order['id'])
        )

    pagination_row_size = _add_pagination_buttons(builder, page, total_pages, AllOrdersPaginator)
    builder.button(text="‚Ü©Ô∏è –î–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏", callback_data=Navigate(to="order_management"))

    layout = [1] * len(orders)
    if pagination_row_size > 0: layout.append(pagination_row_size)
    layout.append(1)
    builder.adjust(*layout)
    return builder.as_markup()

def get_confirm_delete_driver_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=AdminDriverAction(action='delete_confirm', user_id=user_id))
    builder.button(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=DriverProfile(user_id=user_id))
    builder.adjust(2)
    return builder.as_markup()

def get_edit_driver_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ü–Ü–ë", callback_data=AdminDriverAction(action='edit_fullname', user_id=user_id))
    builder.button(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ", callback_data=AdminDriverAction(action='edit_avto_num', user_id=user_id))
    builder.button(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=AdminDriverAction(action='edit_phone_num', user_id=user_id))
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é", callback_data=DriverProfile(user_id=user_id))
    builder.adjust(1)
    return builder.as_markup()

fsm_cancel_keyboard = ReplyKeyboardBuilder().button(
    text="üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏"
).as_markup(
    resize_keyboard=True
)
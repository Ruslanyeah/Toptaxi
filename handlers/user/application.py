from aiogram import types, F, Router, Bot
from aiogram.fsm.context import FSMContext
from keyboards.reply_keyboards import fav_addr_name_skip_keyboard
from utils.callback_factories import (
    SaveAddress
)
from states.fsm_states import FavAddressState
import html
from loguru import logger
from database import queries as db_queries

router = Router()

@router.callback_query(SaveAddress.filter())
async def save_address_start(callback: types.CallbackQuery, callback_data: SaveAddress, state: FSMContext) -> None:
    """
    Starts the process of saving a favorite address after a trip.

    Args:
        callback: The callback query from the "Save address" button.
        callback_data: The callback data containing the order ID.
        state: The FSM context.
    """
    user_id = callback.from_user.id
    order_id = callback_data.order_id

    address_data = {}
    geocoded_successfully = False
    if order_id: # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏
        finish_address = await db_queries.get_order_finish_address(order_id, user_id)
        if not finish_address:
            await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å—É —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
            return
        address_data['address'] = finish_address
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –∞–¥—Ä–µ—Å–∏
        try:
            from utils.geocoder import geocode, SUMY_OBLAST_VIEWBOX
            location = await geocode(f"{finish_address}, –ì–ª—É—Ö—ñ–≤", language='uk', timeout=10, viewbox=SUMY_OBLAST_VIEWBOX, bounded=True)
            address_data['latitude'] = location.latitude if location else None
            address_data['longitude'] = location.longitude if location else None
            geocoded_successfully = location is not None
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É '{finish_address}' –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: {e}")
            address_data['latitude'] = None
            address_data['longitude'] = None

        await state.set_state(FavAddressState.get_name)
        await state.update_data(fav_address_to_save=address_data)

        message_text = (
            f"–í–∏ —Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É:\n"
            f"<b>{html.escape(address_data['address'])}</b>\n\n"
        )
        if not geocoded_successfully:
            message_text += "‚ö†Ô∏è <i>–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –ê–¥—Ä–µ—Å–∞ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —è–∫ —Ç–µ–∫—Å—Ç.</i>\n\n"
        
        message_text += (
            "üè∑Ô∏è –¢–µ–ø–µ—Ä –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É –¥–ª—è –Ω–µ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–î—ñ–º', '–†–æ–±–æ—Ç–∞').\n\n"
            "<i>–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', —ñ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Å–∞–º—É –∞–¥—Ä–µ—Å—É —è–∫ –Ω–∞–∑–≤—É.</i>"
        )

        await callback.message.answer(
            message_text,
            reply_markup=fav_addr_name_skip_keyboard
        )
        await callback.answer()

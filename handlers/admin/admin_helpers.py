from aiogram import types
import html
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot
from aiogram.types import BotCommand, BotCommandScopeChat

from database import queries as db_queries
from ..common.paginator import show_paginated_list
from ..common.helpers import safe_edit_or_send
from keyboards.admin_keyboards import get_client_history_keyboard, get_admin_order_keyboard, get_clients_list_keyboard
from utils.callback_factories import ClientProfile, ClientHistoryPaginator, AdminOrderDetails

CLIENT_HISTORY_PER_PAGE = 10
CLIENTS_PER_PAGE = 5

async def update_admin_commands(bot: Bot, user_id: int, is_admin: bool):
    """
    Instantly updates the command menu for a user when their admin status changes.
    """
    try:
        if is_admin:
            # Set admin commands
            admin_commands = [
                BotCommand(command="start", description="üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É / –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
                BotCommand(command="cabinet", description="üè† –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç"),
                BotCommand(command="driver", description="üöï –ö–∞–±—ñ–Ω–µ—Ç –≤–æ–¥—ñ—è"),
                BotCommand(command="stop", description="üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é"),
                BotCommand(command="admin", description="üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"),
            ]
            await bot.set_my_commands(admin_commands, BotCommandScopeChat(chat_id=user_id))
        else:
            # Revert to default user commands
            user_commands = [
                BotCommand(command="start", description="üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É / –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
                BotCommand(command="cabinet", description="üè† –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç"),
                BotCommand(command="driver", description="üöï –ö–∞–±—ñ–Ω–µ—Ç –≤–æ–¥—ñ—è"),
                BotCommand(command="stop", description="üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é"),
            ]
            await bot.set_my_commands(user_commands, BotCommandScopeChat(chat_id=user_id))
    except Exception as e:
        # Log the error but don't crash the main logic
        logging.warning(f"Could not update commands for user {user_id}: {e}")

def _format_client(client: dict) -> str:
    """
    Formats a single client's info for display in a list.
    """
    return (
        f"üë§ <b>{html.escape(client['full_name'] or '–Ü–º`—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}</b> (ID: <code>{client['user_id']}</code>)\n"
        f"  - –¢–µ–ª–µ—Ñ–æ–Ω: <code>{html.escape(client['phone_number'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}</code>\n"
        f"  - –ü–æ—ó–∑–¥–∫–∏: ‚úÖ {client['finish_applic']} / ‚ùå {client['cancel_applic']}\n\n"
    )

async def show_clients_page(target: types.CallbackQuery | types.Message, page: int, search_query: str | None = None) -> None:
    """
    Displays a paginated list of clients, with an optional search query.
    """
    no_items_kb = get_clients_list_keyboard(page=0, total_pages=0, clients=[], search_active=bool(search_query))
    
    if search_query:
        no_items_text = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{html.escape(search_query)}'</b>\n\n–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    else:
        no_items_text = '<b>üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.'

    await show_paginated_list(
        target=target,
        page=page,
        count_func=db_queries.get_clients_count,
        page_func=db_queries.get_clients_page,
        keyboard_func=get_clients_list_keyboard,
        title="üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
        items_per_page=CLIENTS_PER_PAGE,
        no_items_text=no_items_text,
        no_items_keyboard=no_items_kb,
        count_func_kwargs={'search_query': search_query},
        page_func_kwargs={'search_query': search_query},
        keyboard_func_kwargs={'search_active': bool(search_query)},
        item_formatter=_format_client,
        items_list_kwarg_name='clients'
    )

async def show_client_history_page(target: types.CallbackQuery | types.Message, user_id: int, page: int) -> None:
    """
    Displays a paginated history of a specific client's orders.

    Args:
        target: The message or callback query to respond to.
        user_id: The ID of the client whose history to show.
        page: The page number to display.
    """
    client_name = await db_queries.get_client_name(user_id) or f"ID: {user_id}"
    await show_paginated_list(
        target=target,
        page=page,
        count_func=db_queries.get_all_orders_count_by_client,
        page_func=db_queries.get_all_orders_page_by_client,
        keyboard_func=get_client_history_keyboard,
        title=f"–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è {html.escape(client_name)}",
        items_per_page=CLIENT_HISTORY_PER_PAGE,
        no_items_text=f"<b>–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è {html.escape(client_name)}</b>\n\n–£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.",
        no_items_keyboard=InlineKeyboardBuilder().button(
            text="‚Ü©Ô∏è –î–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            callback_data=ClientProfile(user_id=user_id)
        ).as_markup(),
        count_func_kwargs={'client_id': user_id},
        page_func_kwargs={'client_id': user_id},
        keyboard_func_kwargs={'client_id': user_id},
        item_list_title="–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π:",
        items_list_kwarg_name='orders'
    )

async def show_admin_order_details(target: types.Message | types.CallbackQuery, callback_data: AdminOrderDetails) -> None:
    """
    Displays detailed information about a specific order for the admin.
    """
    order_id = callback_data.order_id
    order = await db_queries.get_order_details(order_id)

    if not order:
        await target.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    client_info, _, _, _, _, _ = await db_queries.get_full_user_info(order['client_id'])
    driver_info = "–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ"
    if order['driver_id']:
        info_text, is_driver, _, _, _, _ = await db_queries.get_full_user_info(order['driver_id'])
        if not is_driver:
            driver_info = f"<i>–í–æ–¥—ñ—è (ID: {order['driver_id']}) –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Å–∏—Å—Ç–µ–º–∏.</i>"
        else:
            driver_info = info_text

    rating_text = "–ù–µ –æ—Ü—ñ–Ω–µ–Ω–æ"
    if order['is_rated'] and order['rating_score']:
        rating_text = f"{order['rating_score']} ‚≠ê"

    text = (
        f"<b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id}</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {order['status']}\n"
        f"<b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {order['created_at']}\n"
        f"<b>–ó–≤—ñ–¥–∫–∏:</b> {html.escape(order['begin_address'])}\n"
        f"<b>–ö—É–¥–∏:</b> {html.escape(order['finish_address'])}\n"
        f"<b>–û—Ü—ñ–Ω–∫–∞ –≤–æ–¥—ñ—é:</b> {rating_text}\n\n"
        f"<b>--- –ö–ª—ñ—î–Ω—Ç ---</b>\n{client_info}\n\n"
        f"<b>--- –í–æ–¥—ñ–π ---</b>\n{driver_info}"
    )
    keyboard = get_admin_order_keyboard(order_id, order['status'])
    await safe_edit_or_send(target, text, reply_markup=keyboard)
    if isinstance(target, types.CallbackQuery):
        await target.answer()
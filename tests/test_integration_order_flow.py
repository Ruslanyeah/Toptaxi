# tests/test_integration_order_flow.py
import asyncio
import sys
import os
import pytest
import pytest_asyncio
from unittest.mock import AsyncMock, ANY
from pytest_mock import MockerFixture

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from aiogram import Dispatcher, Bot
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import User, Chat, Message, CallbackQuery, Update, FSInputFile

from handlers import setup_routers
from states.fsm_states import UserState
from database import queries as db_queries
from handlers.user import order_dispatch

# --- –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---

@pytest.fixture(scope="function")
def storage():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ FSM –≤ –ø–∞–º—è—Ç–∏."""
    return MemoryStorage()

@pytest.fixture
def bot() -> AsyncMock:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞."""
    bot_mock = AsyncMock(spec=Bot)
    bot_mock.id = 123456789
    # –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    bot_mock.send_message = AsyncMock()
    bot_mock.edit_message_text = AsyncMock()
    bot_mock.answer_callback_query = AsyncMock()
    bot_mock.get_chat = AsyncMock(return_value=User(id=123, first_name="Test", is_bot=False))
    bot_mock.copy_message = AsyncMock()
    bot_mock.send_location = AsyncMock()
    bot_mock.send_photo = AsyncMock() # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è send_photo
    return bot_mock

@pytest.fixture(scope="function")
def dispatcher(storage):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ä–æ—É—Ç–µ—Ä–∞–º–∏."""
    dp = Dispatcher(storage=storage)
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã, –∫–∞–∫ –≤ main.py
    main_router, other_router, error_router = setup_routers()
    dp.include_router(main_router)
    dp.include_router(other_router)
    dp.include_router(error_router)
    return dp

@pytest.fixture
def user():
    """–§–∏–∫—Å—Ç—É—Ä–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return User(id=123, is_bot=False, first_name="–¢–µ—Å—Ç–æ–≤—ã–π", last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", username="testuser")

@pytest.fixture
def chat(user):
    """–§–∏–∫—Å—Ç—É—Ä–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —á–∞—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    return Chat(id=user.id, type="private", first_name=user.first_name, last_name=user.last_name, username=user.username)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def send_message(dp: Dispatcher, bot: Bot, user: User, chat: Chat, text: str):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º."""
    message = Message(
        message_id=1,
        date=asyncio.get_event_loop().time(),
        chat=chat,
        from_user=user,
        text=text
    )
    await dp.feed_update(bot, Update(update_id=1, message=message))


# --- –¢–µ—Å—Ç—ã ---

@pytest.mark.asyncio
async def test_standard_taxi_order_flow(dispatcher: Dispatcher, bot: Bot, user: User, chat: Chat, mocker: MockerFixture):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏:
    1. –ù–∞–∂–∞—Ç–∏–µ "–ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ"
    2. –í—ã–±–æ—Ä "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É"
    3. –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á–∏
    4. –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    5. –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    6. –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    """
    # –ú–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º, —á—Ç–æ–±—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç
    mocker.patch('database.queries.get_user_fav_addresses', return_value=[])
    mocker.patch('utils.geocoder.geocode', side_effect=[
        [AsyncMock(address="–≤—É–ª–∏—Ü—è –°–æ–±–æ—Ä–Ω–∞, 1, –ì–ª—É—Ö—ñ–≤", latitude=51.677, longitude=33.911)], # –ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏
        [AsyncMock(address="–≤—É–ª–∏—Ü—è –ö–∏—ó–≤—Å—å–∫–∞, 43, –ì–ª—É—Ö—ñ–≤", latitude=51.68, longitude=33.92)]  # –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    ])
    mocker.patch('database.queries.update_client_phone', return_value=None)
    mocker.patch('database.queries.create_order_in_db', return_value=999) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    mocker.patch('handlers.user.order_dispatch.dispatch_order_to_drivers', return_value=None)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–æ–∫–∞
    async def mock_send_with_photo(msg, path, text, kb):
        return await bot.send_photo(chat_id=msg.chat.id, photo=ANY, caption=text, reply_markup=kb, parse_mode='HTML')

    # –ú–æ–∫–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ —á–∏—Ç–∞–ª–∞ —Ñ–∞–π–ª, –∞ –≤—ã–∑—ã–≤–∞–ª–∞ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ –±–æ—Ç–∞
    mocker.patch('handlers.common.helpers.send_message_with_photo', side_effect=mock_send_with_photo)

    # --- –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ" ---
    await send_message(dispatcher, bot, user, chat, "üöï –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ")
    # –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ send_photo —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º caption
    bot.send_photo.assert_called_with(
        chat_id=chat.id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        photo=ANY, # –ú—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—É –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç –µ–µ –Ω–∞–ª–∏—á–∏—è
        caption='üìç <b>–ö—Ä–æ–∫ 1: –ê–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á—ñ</b>\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏:',
        reply_markup=ANY,
        parse_mode='HTML'
    )
    state = await dispatcher.fsm.get_context(bot, user.id, user.id).get_state()
    assert state == UserState.locate.state

    # --- –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É" ---
    await send_message(dispatcher, bot, user, chat, "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É")
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ –Ω–µ —Ñ–æ—Ç–æ
    bot.send_message.assert_called_with(
        chat.id,
        "‚úçÔ∏è –í–∫–∞–∂—ñ—Ç—å <b>–ê–î–†–ï–°–£</b> –∞–±–æ <b>–ú–Ü–°–¶–ï</b>, –∑–≤—ñ–¥–∫–∏ –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏:",
        reply_markup=ANY
    )
    state = await dispatcher.fsm.get_context(bot, user.id, user.id).get_state()
    assert state == UserState.begin_address.state

    # --- –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏ ---
    await send_message(dispatcher, bot, user, chat, "–°–æ–±–æ—Ä–Ω–∞ 1")
    bot.send_message.assert_called_with(
        chat.id,
        '‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>–≤—É–ª–∏—Ü—è –°–æ–±–æ—Ä–Ω–∞, 1, –ì–ª—É—Ö—ñ–≤</b>'
    )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    bot.send_message.assert_called_with(
        chat.id,
        'üèÅ <b>–ö—Ä–æ–∫ 2: –ê–¥—Ä–µ—Å–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è</b>\n\n–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å, <b>–ö–£–î–ò</b> –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–≤–µ–∑—Ç–∏',
        reply_markup=ANY
    )
    state = await dispatcher.fsm.get_context(bot, user.id, user.id).get_state()
    assert state == UserState.finish_address.state

    # --- –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ---
    await send_message(dispatcher, bot, user, chat, "–ö–∏—ó–≤—Å—å–∫–∞ 43")
    bot.send_message.assert_called_with(
        chat.id,
        '‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>–≤—É–ª–∏—Ü—è –ö–∏—ó–≤—Å—å–∫–∞, 43, –ì–ª—É—Ö—ñ–≤</b>'
    )
    bot.send_message.assert_called_with(
        chat.id,
        'üì± <b>–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç</b>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤\'—è–∑–∫—É –∑ –≤–æ–¥—ñ—î–º.',
        reply_markup=ANY
    )
    state = await dispatcher.fsm.get_context(bot, user.id, user.id).get_state()
    assert state == UserState.number.state

    # --- –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
    await send_message(dispatcher, bot, user, chat, "+380991234567")
    bot.send_message.assert_called_with(
        chat.id,
        "üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)\n\n–ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—É–¥—å-—è–∫—É –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤–æ–¥—ñ—è.",
        reply_markup=ANY
    )
    state = await dispatcher.fsm.get_context(bot, user.id, user.id).get_state()
    assert state == UserState.comment.state

    # --- –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ---
    await send_message(dispatcher, bot, user, chat, "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è")
    bot.send_message.assert_called_with(
        chat.id,
        ANY, # –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        reply_markup=ANY
    )
    state = await dispatcher.fsm.get_context(bot, user.id, user.id).get_state()
    assert state == UserState.confirm_order.state

    # --- –®–∞–≥ 7: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑ ---
    await send_message(dispatcher, bot, user, chat, "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üèÅ")
    db_queries.create_order_in_db.assert_awaited_once()
    order_dispatch.dispatch_order_to_drivers.assert_awaited_once()
    bot.send_message.assert_called_with(
        chat.id,
        ANY, # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        reply_markup=ANY
    )
    state = await dispatcher.fsm.get_context(bot, user.id, user.id).get_state()
    assert state is None # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω–æ

if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: pytest
    pass

from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
import html

from states.fsm_states import AdminState
from database import queries as db_queries
from keyboards.common import Navigate
from keyboards.reply_keyboards import fsm_cancel_keyboard
from keyboards.admin_keyboards import get_admin_management_keyboard
from utils.callback_factories import AdminAction
from .admin_helpers import update_admin_commands
from handlers.common.helpers import _display_client_profile
from config.config import ADMIN_IDS

router = Router()

async def show_admin_management_menu(target: types.Message | types.CallbackQuery):
    """Displays the admin management menu with a list of current admins."""
    all_admins = await db_queries.get_all_admins()
    # Exclude root admins from the list of manageable admins
    manageable_admins = [admin for admin in all_admins if admin['user_id'] not in ADMIN_IDS]

    text = "<b>üëë –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
    if manageable_admins:
        text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–º'—è, —â–æ–± –∑–∞–±—Ä–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    else:
        text += "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤."

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_caption(caption=text, reply_markup=get_admin_management_keyboard(manageable_admins))
    else:
        await target.answer(text, reply_markup=get_admin_management_keyboard(manageable_admins))

@router.callback_query(Navigate.filter(F.to == "admin_management"))
async def admin_management_entry(call: types.CallbackQuery):
    """Entry point for the admin management menu."""
    await show_admin_management_menu(call)
    await call.answer()

@router.callback_query(AdminAction.filter(F.action == 'add_admin_start'))
async def add_admin_start(call: types.CallbackQuery, state: FSMContext):
    """Starts the FSM to add a new admin."""
    await state.set_state(AdminState.get_admin_id_to_add)
    await call.message.answer(
        "<b>‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=fsm_cancel_keyboard
    )
    await call.answer()

@router.message(AdminState.get_admin_id_to_add)
async def process_add_admin_id(message: types.Message, state: FSMContext):
    """Processes the user ID, grants admin rights, and shows the updated list."""
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=fsm_cancel_keyboard)
        return

    user_id = int(message.text)
    
    if not await db_queries.get_client_name(user_id):
        await message.answer(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <code>{user_id}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω —Ö–æ—á–∞ –± —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–≤ –±–æ—Ç–∞.", reply_markup=fsm_cancel_keyboard)
        return

    if user_id in ADMIN_IDS:
        await message.answer(f"‚ùå –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ô–æ–≥–æ –ø—Ä–∞–≤–∞ –Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏.", reply_markup=types.ReplyKeyboardRemove())
    else:
        await db_queries.set_admin_status(user_id, is_admin=True)
        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ID <code>{user_id}</code>.", reply_markup=types.ReplyKeyboardRemove())
        try:
            await update_admin_commands(message.bot, user_id, is_admin=True)
            await message.bot.send_message(user_id, "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞–º –Ω–∞–¥–∞–Ω–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception:
            pass

    await state.clear()
    await show_admin_management_menu(message)

@router.callback_query(AdminAction.filter(F.action == 'remove_admin'))
async def remove_admin(call: types.CallbackQuery, callback_data: AdminAction):
    """Removes admin rights from a user."""
    user_id = callback_data.target_id
    if user_id in ADMIN_IDS:
        await call.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∞–≤–∞ —É —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    await db_queries.set_admin_status(user_id, is_admin=False)
    await call.answer("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ.", show_alert=True)
    try:
        await update_admin_commands(call.bot, user_id, is_admin=False)
        await call.bot.send_message(user_id, "‚ùóÔ∏è –í–∞—à—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—É–ª–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ.")
    except Exception:
        pass

    await show_admin_management_menu(call)

@router.message(AdminState.get_admin_id_to_add, F.text == "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_add_admin(message: types.Message, state: FSMContext):
    """Cancels the process of adding an admin."""
    await state.clear()
    await message.answer("‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    await show_admin_management_menu(message)

@router.callback_query(AdminAction.filter(F.action == 'toggle_admin'))
async def toggle_admin_rights(call: types.CallbackQuery, callback_data: AdminAction):
    """Toggles admin rights for a user directly from their profile."""
    user_id = callback_data.target_id
    if user_id in ADMIN_IDS:
        await call.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    is_currently_admin = await db_queries.is_user_admin(user_id)
    new_status = not is_currently_admin

    await db_queries.set_admin_status(user_id, is_admin=new_status)

    if new_status:
        await call.answer("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–¥–∞–Ω–æ.", show_alert=True)
        await update_admin_commands(call.bot, user_id, is_admin=True)
        notification_text = "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞–º –Ω–∞–¥–∞–Ω–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    else:
        await call.answer("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ.", show_alert=True)
        await update_admin_commands(call.bot, user_id, is_admin=False)
        notification_text = "‚ùóÔ∏è –í–∞—à—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—É–ª–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ."
    
    try:
        await call.bot.send_message(user_id, notification_text)
    except Exception:
        pass # Ignore if user blocked the bot

    # Refresh the profile view to show the updated status
    await _display_client_profile(call, user_id)
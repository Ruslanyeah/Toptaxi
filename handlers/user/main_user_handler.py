from aiogram import types, F, Router
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from keyboards.reply_keyboards import main_menu_keyboard
from keyboards.reply_keyboards import build_address_input_keyboard
from keyboards.user_keyboards import get_contacts_keyboard
from config.config import BASE_DIR
from states.fsm_states import UserState
from ..common.helpers import send_message_with_photo
from database import queries as db_queries
import html
from loguru import logger

router = Router()

WELCOME_IMAGE_PATH = BASE_DIR / "assets" / "images" / "main_menu.jpg"
ORDER_START_IMAGE_PATH = BASE_DIR / "assets" / "images" / "order_start.jpg"

WELCOME_TEXT = (
    '<b>"TopüöïTaxi –ì–ª—É—Ö—ñ–≤" ‚Äì –≤–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –¥—Ä—É–≥ –Ω–∞ –¥–æ—Ä–æ–∑—ñ!</b>\n\n'
    'üìú <b>–©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ:</b>\n'
    '‚Ä¢ –®–≤–∏–¥–∫—ñ –ø–æ—ó–∑–¥–∫–∏ –º—ñ—Å—Ç–æ–º —Ç–∞ –∑–∞ –π–æ–≥–æ –º–µ–∂—ñ\n'
    '‚Ä¢ –ü–æ—ó–∑–¥–∫–∏ –±–µ–∑ —Å—Ç—Ä–µ—Å—É —ñ –∑–∞–π–≤–æ–≥–æ –∫–ª–æ–ø–æ—Ç—É\n'
    '‚Ä¢ –¢–≤–µ—Ä–µ–∑–∏–π –≤–æ–¥—ñ–π, —è–∫—â–æ –≤–µ—á—ñ—Ä –±—É–≤ –Ω–∞—Å–∏—á–µ–Ω–∏–º\n'
    '‚Ä¢ –ü–æ—ó–∑–¥–∫–∏ –∑ –¥—ñ—Ç—å–º–∏ (–¥–∏—Ç—è—á—ñ –∫—Ä—ñ—Å–ª–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é)\n'
    '‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –ø–∞–∫—É–Ω–∫—ñ–≤'
)

@router.message(CommandStart())
async def menu_handler(message: types.Message) -> None:
    """
    Handles the /start command. Greets the user, creates or updates their
    profile in the database, and displays the main menu.

    Args:
        message: The user's message.
    """
    user = message.from_user
    await db_queries.add_or_update_user(
        user_id=user.id,
        full_name=user.full_name,
        username=user.username
    )
    personalized_text = f"<b>–ü—Ä–∏–≤—ñ—Ç, {html.escape(user.first_name)}!</b>\n\n" + WELCOME_TEXT
    await send_message_with_photo(message, WELCOME_IMAGE_PATH, personalized_text, main_menu_keyboard)

@router.message(Command('stop'))
async def stop_command_handler(message: types.Message, state: FSMContext) -> None:
    """
    Handles the /stop command, cancelling any active FSM state
    and returning the user to the main menu.

    Args:
        message: The user's message.
        state: The FSM context.
    """
    await state.clear()
    await message.answer("‚úÖ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

@router.callback_query(F.data == "stop_fsm")
async def stop_fsm_callback_handler(call: types.CallbackQuery, state: FSMContext) -> None:
    """
    Handles the "Cancel action" inline button, cancelling any active FSM state.
    """
    await state.clear()
    try:
        await call.message.edit_text("‚úÖ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=None)
    except Exception:
        await call.message.answer("‚úÖ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await call.answer()

@router.message(F.text == 'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é', StateFilter('*'))
async def back_handler(message: types.Message, state: FSMContext) -> None:
    """
    Handles the "Back to menu" button, clearing any state and showing the main menu.

    Args:
        message: The user's message.
        state: The FSM context.
    """
    await state.clear()
    personalized_text = f"<b>–ü—Ä–∏–≤—ñ—Ç, {html.escape(message.from_user.first_name)}!</b>\n\n" + WELCOME_TEXT
    await send_message_with_photo(message, WELCOME_IMAGE_PATH, personalized_text, main_menu_keyboard)

@router.message(F.text == 'üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏')
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    """
    Handles the "Cancel order" button during the FSM order creation process.
    """
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ÑπÔ∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.", reply_markup=main_menu_keyboard)
        return

    await state.clear()
    # To provide a consistent experience, show the main menu with the image after cancellation.
    await message.answer('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.')
    personalized_text = f"<b>–ü—Ä–∏–≤—ñ—Ç, {html.escape(message.from_user.first_name)}!</b>\n\n" + WELCOME_TEXT
    await send_message_with_photo(message, WELCOME_IMAGE_PATH, personalized_text, main_menu_keyboard)

@router.message(F.text == '‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞')
async def contacts_handler(message: types.Message) -> None:
    """
    Displays contact information.

    Args:
        message: The user's message.
    """
    operator_phone = "+380992782620"
    text = (
        f"<b>–ó–≤'—è–∑–æ–∫ –∑ –Ω–∞–º–∏:</b>\n\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤:</b>\n"
        f"<code>{operator_phone}</code>\n\n"
        f"–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º–∏, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞–º.\n\n"
        f"–¢–∞–∫–æ–∂, —Å–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–∞–º–∏ –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö —Ç–∞ –∑–∞–ª–∏—à–∞–π—Ç–µ –≤—ñ–¥–≥—É–∫–∏!"
    )
    await message.answer(text, reply_markup=get_contacts_keyboard())

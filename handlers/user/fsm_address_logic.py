from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup
from keyboards.reply_keyboards import (
    build_address_input_keyboard, main_menu_keyboard, build_destination_address_keyboard, 
    phone_request_keyboard, fsm_cancel_keyboard
)
from keyboards.user_keyboards import (
    get_confirm_unfound_address_keyboard, get_address_clarification_keyboard,
    get_confirm_clarified_address_keyboard
)
from keyboards.common import Navigate
from utils.callback_factories import (
    AddressCallbackData, ClarifyAddressCallbackData, ConfirmClarifiedAddress, ConfirmUnfoundAddress
)
from aiogram.exceptions import TelegramBadRequest
from config.config import DB_PATH, GEOCODING_CITY_CONTEXT, BASE_DIR
from ..common.helpers import send_message_with_photo
import html
import aiosqlite
from typing import Type
import re
from utils.geocoder import reverse, geocode
from database import queries as db_queries
from states.fsm_states import UserState, PreOrderState, DeliveryState
from .order_helpers import _go_to_finish_address_step, _go_to_phone_number_step
from loguru import logger

# –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏
router = Router()

# This module handles all FSM logic for address input.
# It's designed to be reusable across different order types (taxi, pre-order, delivery).
# The handlers are registered for a union of states from different FSMs.

# States for the very first step of address input (choosing method)
LOCATE_STATES = {UserState.locate, PreOrderState.locate, DeliveryState.locate}

# States for when the bot is expecting the user to type the START address
BEGIN_ADDRESS_STATES = {UserState.begin_address, PreOrderState.begin_address, DeliveryState.begin_address}

# States for when the bot is expecting a VOICE message for the START address
BEGIN_ADDRESS_VOICE_STATES = {UserState.begin_address_voice, PreOrderState.begin_address_voice, DeliveryState.begin_address_voice}

# States for when the bot is expecting the user to type the DESTINATION address
FINISH_ADDRESS_STATES = {UserState.finish_address, PreOrderState.finish_address, DeliveryState.finish_address}

# ((south_latitude, west_longitude), (north_latitude, east_longitude))
SUMY_OBLAST_VIEWBOX = ((50.35, 33.25), (51.9, 35.25))

def _shorten_address(full_address: str) -> str:
    """Removes redundant parts like region or district from the address string."""
    return full_address.replace("–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å, ", "").replace("–ì–ª—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω, ", "").replace("–º—ñ—Å—Ç–æ –ì–ª—É—Ö—ñ–≤, ", "").replace("–ì–ª—É—Ö—ñ–≤, ", "").strip()

async def process_fav_address_begin(message: types.Message, state: FSMContext) -> None:
    """
    Handles the selection of a favorite address for the starting point.
    """
    fav_name = message.text.removeprefix('‚ù§Ô∏è ')
    fav_addr = await db_queries.get_fav_address_by_name(message.from_user.id, fav_name)

    if not fav_addr:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü—é –∑–±–µ—Ä–µ–∂–µ–Ω—É –∞–¥—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    await state.update_data(begin_address=fav_addr[0], latitude=fav_addr[1], longitude=fav_addr[2])
    await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{html.escape(fav_addr[0])}</b>')
    await _go_to_finish_address_step(message, state)

async def process_fav_address_finish(message: types.Message, state: FSMContext) -> None:
    """
    Handles selecting a favorite address for the destination.
    """
    fav_name = message.text.removeprefix('‚ù§Ô∏è ')
    fav_addr = await db_queries.get_fav_address_by_name(message.from_user.id, fav_name)

    if not fav_addr:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü—é –∑–±–µ—Ä–µ–∂–µ–Ω—É –∞–¥—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    await state.update_data(finish_address=fav_addr[0])
    await _go_to_phone_number_step(message, state)

async def _handle_manual_address_input(message: types.Message, state: FSMContext, current_address_type: str) -> None:
    """
    Helper to process a manually entered address for both start and destination.
    """
    try:
        if len(message.text) > 100:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –±—ñ–ª—å—à –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞ —Ç–æ—á–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.", reply_markup=fsm_cancel_keyboard)
            return

        search_text = message.text
        # Add city context for better geocoding results
        if GEOCODING_CITY_CONTEXT and GEOCODING_CITY_CONTEXT.lower() not in search_text.lower():
            search_text = f"{search_text}, {GEOCODING_CITY_CONTEXT}"

        from states import fsm_states # Local import to avoid cycles

        locations = await geocode(
            search_text,
            language='uk',
            exactly_one=False,
            limit=5,
            viewbox=SUMY_OBLAST_VIEWBOX
        )

        current_state_group_name = (await state.get_state()).split(':')[0]
        states = getattr(fsm_states, current_state_group_name, fsm_states.UserState)

        if not locations:
            await state.update_data(unfound_address_text=message.text, unfound_address_type=current_address_type)
            await state.set_state(states.confirm_unfound_address)
            await message.answer(
                "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü—é –∞–¥—Ä–µ—Å—É –Ω–∞ –∫–∞—Ä—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —è–∫ —î, –∞–±–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–Ω–æ–≤—É.",
                reply_markup=get_confirm_unfound_address_keyboard()
            )
            return

        original_input = message.text
        if len(locations) > 1:
            clarification_options = [
                {"address": loc.address, "latitude": loc.latitude, "longitude": loc.longitude}
                for loc in locations
            ]
            await state.update_data(original_address_input=original_input, current_address_type=current_address_type)
            await state.update_data(clarification_options=clarification_options)
            
            next_clarify_state = states.clarify_begin_address if current_address_type == 'begin' else states.clarify_finish_address
            await state.set_state(next_clarify_state)
            
            prompt_text = "ü§î <b>–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ:</b>" if current_address_type == 'begin' else "ü§î <b>–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>"
            await message.answer(
                prompt_text,
                reply_markup=get_address_clarification_keyboard(locations)
            )
        else:
            location = locations[0]
            short_address = _shorten_address(location.address)

            if current_address_type == 'begin':
                await state.update_data(begin_address=short_address, latitude=location.latitude, longitude=location.longitude)
                await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{html.escape(short_address)}</b>')
                await _go_to_finish_address_step(message, state)
            else: # finish
                await state.update_data(finish_address=short_address)
                await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{html.escape(short_address)}</b>')
                await _go_to_phone_number_step(message, state)
                
    except Exception as e:
        logger.error(f"Geopy error during forward geocoding: {e}")
        await message.answer("–ü—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –∞–¥—Ä–µ—Å–∏ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=fsm_cancel_keyboard)

async def process_initial_location(message: types.Message, state: FSMContext) -> None:
    """
    Handles receiving a location for the starting address.
    """
    from states.fsm_states import UserState, PreOrderState, DeliveryState # Local import
    location = None
    try:
        location = await reverse(f"{message.location.latitude}, {message.location.longitude}", language='uk')
    except Exception as e:
        logger.error(f"Geopy reverse geocoding error: {e}")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–∞ –≤–∞—à–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É.", reply_markup=main_menu_keyboard)
        await state.clear()
        return

    if location:
        short_address = _shorten_address(location.address)
        await state.update_data(begin_address=short_address, latitude=message.location.latitude, longitude=message.location.longitude)
        await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{html.escape(short_address)}</b>')
        await _go_to_finish_address_step(message, state)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–¥—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É.")

async def process_clarify_with_driver(message: types.Message, state: FSMContext) -> None:
    """
    Handles the 'Clarify with driver' button for the destination address.
    """
    await state.update_data(finish_address="–ó–∞ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è–º –∑ –≤–æ–¥—ñ—î–º")
    await _go_to_phone_number_step(message, state)

# --- Generic Logic Functions (not handlers) ---

async def process_confirm_unfound_address(call: types.CallbackQuery, callback_data: ConfirmUnfoundAddress, state: FSMContext):
    """
    Handles the user's choice after a manually entered address was not found on the map.
    """
    data = await state.get_data()
    address_type = data.get('unfound_address_type', 'begin')
    original_input = data.get('unfound_address_text', '') # Corrected key

    current_state_group_name = (await state.get_state()).split(':')[0]
    from states import fsm_states
    states = getattr(fsm_states, current_state_group_name, fsm_states.UserState)

    if callback_data.action == 'use_anyway':
        if address_type == 'begin':
            await state.update_data(begin_address=original_input, latitude=None, longitude=None)
            await call.message.edit_text(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫: <b>{html.escape(original_input)}</b>')
            await _go_to_finish_address_step(call, state)
        else: # finish
            await state.update_data(finish_address=original_input)
            await call.message.edit_text(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫: <b>{html.escape(original_input)}</b>')
            await _go_to_phone_number_step(call, state)
    elif callback_data.action == 'retry':
        next_state = states.begin_address if address_type == 'begin' else states.finish_address
        await state.set_state(next_state)
        await call.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —â–µ —Ä–∞–∑, –º–æ–∂–ª–∏–≤–æ, –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ.", reply_markup=None)
    
    await call.answer()

async def process_clarified_address(call: types.CallbackQuery, callback_data: ClarifyAddressCallbackData, state: FSMContext):
    """
    Handles the user selecting one of the clarified address options.
    """
    data = await state.get_data()
    options = data.get('clarification_options', [])
    address_type = data.get('current_address_type', 'begin')
    
    if not options or callback_data.index >= len(options):
        await call.answer("–ü–æ–º–∏–ª–∫–∞: –æ–ø—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.", show_alert=True)
        return

    selected_option = options[callback_data.index]
    short_address = _shorten_address(selected_option['address'])

    if address_type == 'begin':
        await state.update_data(begin_address=short_address, latitude=selected_option['latitude'], longitude=selected_option['longitude'])
        await call.message.edit_text(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{html.escape(short_address)}</b>')
        await _go_to_finish_address_step(call, state)
    else: # finish
        await state.update_data(finish_address=short_address)
        await call.message.edit_text(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{html.escape(short_address)}</b>')
        await _go_to_phone_number_step(call, state)

    await call.answer()

async def process_clarify_skip(call: types.CallbackQuery, state: FSMContext):
    """
    Handles the user choosing to use their original text input instead of the clarified options.
    """
    data = await state.get_data()
    original_input = data.get('original_address_input', '')
    address_type = data.get('current_address_type', 'begin')

    if not original_input:
        await call.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.", show_alert=True)
        return

    if address_type == 'begin':
        await state.update_data(begin_address=original_input, latitude=None, longitude=None)
        await call.message.edit_text(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫: <b>{html.escape(original_input)}</b>')
        await _go_to_finish_address_step(call, state)
    else: # finish
        await state.update_data(finish_address=original_input)
        await call.message.edit_text(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫: <b>{html.escape(original_input)}</b>')
        await _go_to_phone_number_step(call, state)
    
    await call.answer()

async def process_clarify_retry(call: types.CallbackQuery, state: FSMContext):
    """
    Handles the user wanting to re-enter the address after clarification failed.
    """
    data = await state.get_data()
    address_type = data.get('current_address_type', 'begin')
    
    current_state_group_name = (await state.get_state()).split(':')[0]
    from states import fsm_states
    states = getattr(fsm_states, current_state_group_name, fsm_states.UserState)

    next_state = states.begin_address if address_type == 'begin' else states.finish_address
    await state.set_state(next_state)
    await call.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —â–µ —Ä–∞–∑, –º–æ–∂–ª–∏–≤–æ, –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ.", reply_markup=None)
    await call.answer()

# --- Centralized Handlers ---

# --- UserState Handlers ---
@router.message(UserState.locate, F.text == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É')
async def handle_manual_input_begin_user(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –í–∫–∞–∂—ñ—Ç—å <b>–ê–î–†–ï–°–£</b> –∞–±–æ <b>–ú–Ü–°–¶–ï</b>, –∑–≤—ñ–¥–∫–∏ –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏:",
        reply_markup=fsm_cancel_keyboard
    )
    await state.set_state(UserState.begin_address)

@router.message(UserState.locate, F.text.startswith('‚ù§Ô∏è '))
async def handle_fav_address_begin_user(message: types.Message, state: FSMContext):
    await process_fav_address_begin(message, state)

@router.message(UserState.locate, F.text == 'üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–º')
async def handle_voice_input_begin_user(message: types.Message, state: FSMContext):
    await message.answer(
        "üéôÔ∏è <b>–ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥—Ä–µ—Å–æ—é –ø–æ–¥–∞—á—ñ.</b>\n\n"
        "–ß—ñ—Ç–∫–æ –Ω–∞–∑–≤—ñ—Ç—å –≤—É–ª–∏—Ü—é —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É.",
        reply_markup=fsm_cancel_keyboard
    )
    await state.set_state(UserState.begin_address_voice)

@router.message(UserState.locate, F.content_type == types.ContentType.LOCATION)
async def handle_location_begin_user(message: types.Message, state: FSMContext):
    await process_initial_location(message, state)

@router.message(UserState.begin_address, F.text)
async def handle_text_begin_user(message: types.Message, state: FSMContext):
    if message.text.startswith('‚ù§Ô∏è '):
        await process_fav_address_begin(message, state)
    else:
        await _handle_manual_address_input(message, state, 'begin')

@router.message(UserState.begin_address_voice, F.voice)
async def handle_voice_begin_user(message: types.Message, state: FSMContext):
    await state.update_data(begin_address="üìç –ê–¥—Ä–µ—Å–∞ –≥–æ–ª–æ—Å–æ–º", begin_address_voice_id=message.voice.file_id, latitude=None, longitude=None)
    await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –∑–∞–ø–∏—Å–∞–Ω–æ —è–∫ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.')
    await _go_to_finish_address_step(message, state)

@router.message(UserState.finish_address, F.text == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É')
async def handle_manual_input_finish_user(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –í–∫–∞–∂—ñ—Ç—å, <b>–ö–£–î–ò</b> –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–≤–µ–∑—Ç–∏:",
        reply_markup=fsm_cancel_keyboard,
    )
    # No state change needed, we are already in finish_address

@router.message(UserState.finish_address, F.text == 'üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–º')
async def handle_voice_input_finish_user(message: types.Message, state: FSMContext):
    await message.answer(
        "üéôÔ∏è <b>–ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥—Ä–µ—Å–æ—é –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.</b>\n\n"
        "–ß—ñ—Ç–∫–æ –Ω–∞–∑–≤—ñ—Ç—å –≤—É–ª–∏—Ü—é —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É, –∞–±–æ —Å–∫–∞–∂—ñ—Ç—å '–¥–æ —Ü–µ–Ω—Ç—Ä—É', '–Ω–∞ –≤–æ–∫–∑–∞–ª' —ñ —Ç.–¥.",
        reply_markup=fsm_cancel_keyboard
    )
    await state.set_state(UserState.finish_address_voice)

@router.message(UserState.finish_address, F.text == 'üìç –£—Ç–æ—á–Ω–∏—Ç–∏ –≤–æ–¥—ñ—î–≤—ñ')
async def handle_clarify_finish_user(message: types.Message, state: FSMContext):
    await process_clarify_with_driver(message, state)

@router.message(UserState.finish_address, F.text)
async def handle_text_finish_user(message: types.Message, state: FSMContext):
    if message.text.startswith('‚ù§Ô∏è '):
        await process_fav_address_finish(message, state)
    else:
        await _handle_manual_address_input(message, state, 'finish')

@router.message(UserState.finish_address_voice, F.voice)
async def handle_voice_finish_user(message: types.Message, state: FSMContext):
    await state.update_data(finish_address="üìç –ê–¥—Ä–µ—Å–∞ –≥–æ–ª–æ—Å–æ–º", finish_address_voice_id=message.voice.file_id)
    await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ —è–∫ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.')
    await _go_to_phone_number_step(message, state)

# --- PreOrderState Handlers ---
@router.message(PreOrderState.locate, F.text == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É')
async def handle_manual_input_begin_preorder(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –í–∫–∞–∂—ñ—Ç—å <b>–ê–î–†–ï–°–£</b> –∞–±–æ <b>–ú–Ü–°–¶–ï</b>, –∑–≤—ñ–¥–∫–∏ –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏:",
        reply_markup=fsm_cancel_keyboard,
    )
    await state.set_state(PreOrderState.begin_address)

@router.message(PreOrderState.locate, F.text.startswith('‚ù§Ô∏è '))
async def handle_fav_address_begin_preorder(message: types.Message, state: FSMContext):
    await process_fav_address_begin(message, state)

@router.message(PreOrderState.locate, F.text == 'üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–º')
async def handle_voice_input_begin_preorder(message: types.Message, state: FSMContext):
    await message.answer(
        "üéôÔ∏è <b>–ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥—Ä–µ—Å–æ—é –ø–æ–¥–∞—á—ñ.</b>\n\n"
        "–ß—ñ—Ç–∫–æ –Ω–∞–∑–≤—ñ—Ç—å –≤—É–ª–∏—Ü—é —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É.",
        reply_markup=fsm_cancel_keyboard
    )
    await state.set_state(PreOrderState.begin_address_voice)

@router.message(PreOrderState.locate, F.content_type == types.ContentType.LOCATION)
async def handle_location_begin_preorder(message: types.Message, state: FSMContext):
    await process_initial_location(message, state)

@router.message(PreOrderState.begin_address, F.text)
async def handle_text_begin_preorder(message: types.Message, state: FSMContext):
    if message.text.startswith('‚ù§Ô∏è '): await process_fav_address_begin(message, state)
    else: await _handle_manual_address_input(message, state, 'begin')

@router.message(PreOrderState.begin_address_voice, F.voice)
async def handle_voice_begin_preorder(message: types.Message, state: FSMContext):
    await state.update_data(begin_address="üìç –ê–¥—Ä–µ—Å–∞ –≥–æ–ª–æ—Å–æ–º", begin_address_voice_id=message.voice.file_id, latitude=None, longitude=None)
    await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –∑–∞–ø–∏—Å–∞–Ω–æ —è–∫ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.')
    await _go_to_finish_address_step(message, state)

@router.message(PreOrderState.finish_address, F.text == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É')
async def handle_manual_input_finish_preorder(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –í–∫–∞–∂—ñ—Ç—å, <b>–ö–£–î–ò</b> –≤–∞—Å –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–≤–µ–∑—Ç–∏:",
        reply_markup=fsm_cancel_keyboard,
    )
    # No state change needed

@router.message(PreOrderState.finish_address, F.text == 'üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–º')
async def handle_voice_input_finish_preorder(message: types.Message, state: FSMContext):
    await message.answer(
        "üéôÔ∏è <b>–ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥—Ä–µ—Å–æ—é –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.</b>\n\n"
        "–ß—ñ—Ç–∫–æ –Ω–∞–∑–≤—ñ—Ç—å –≤—É–ª–∏—Ü—é —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É, –∞–±–æ —Å–∫–∞–∂—ñ—Ç—å '–¥–æ —Ü–µ–Ω—Ç—Ä—É', '–Ω–∞ –≤–æ–∫–∑–∞–ª' —ñ —Ç.–¥.",
        reply_markup=fsm_cancel_keyboard
    )
    await state.set_state(PreOrderState.finish_address_voice)

@router.message(PreOrderState.finish_address, F.text == 'üìç –£—Ç–æ—á–Ω–∏—Ç–∏ –≤–æ–¥—ñ—î–≤—ñ')
async def handle_clarify_finish_preorder(message: types.Message, state: FSMContext):
    await process_clarify_with_driver(message, state)

@router.message(PreOrderState.finish_address, F.text)
async def handle_text_finish_preorder(message: types.Message, state: FSMContext):
    if message.text.startswith('‚ù§Ô∏è '): await process_fav_address_finish(message, state)
    else: await _handle_manual_address_input(message, state, 'finish')

@router.message(PreOrderState.finish_address_voice, F.voice)
async def handle_voice_finish_preorder(message: types.Message, state: FSMContext):
    await state.update_data(finish_address="üìç –ê–¥—Ä–µ—Å–∞ –≥–æ–ª–æ—Å–æ–º", finish_address_voice_id=message.voice.file_id)
    await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ —è–∫ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.')
    await _go_to_phone_number_step(message, state)

# --- DeliveryState Handlers ---
@router.message(DeliveryState.locate, F.text == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É')
async def handle_manual_input_begin_delivery(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –í–∫–∞–∂—ñ—Ç—å <b>–ê–î–†–ï–°–£</b> –∞–±–æ <b>–ú–Ü–°–¶–ï</b>, –∑–≤—ñ–¥–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –ø–æ—Å–∏–ª–∫—É:",
        reply_markup=fsm_cancel_keyboard,
    )
    await state.set_state(DeliveryState.begin_address)

@router.message(DeliveryState.locate, F.text.startswith('‚ù§Ô∏è '))
async def handle_fav_address_begin_delivery(message: types.Message, state: FSMContext):
    await process_fav_address_begin(message, state)

@router.message(DeliveryState.locate, F.text == 'üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–º')
async def handle_voice_input_begin_delivery(message: types.Message, state: FSMContext):
    await message.answer(
        "üéôÔ∏è <b>–ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥—Ä–µ—Å–æ—é, –∑–≤—ñ–¥–∫–∏ –∑–∞–±—Ä–∞—Ç–∏ –ø–æ—Å–∏–ª–∫—É.</b>",
        reply_markup=fsm_cancel_keyboard
    )
    await state.set_state(DeliveryState.begin_address_voice)

@router.message(DeliveryState.locate, F.content_type == types.ContentType.LOCATION)
async def handle_location_begin_delivery(message: types.Message, state: FSMContext):
    await process_initial_location(message, state)

@router.message(DeliveryState.begin_address, F.text)
async def handle_text_begin_delivery(message: types.Message, state: FSMContext):
    if message.text.startswith('‚ù§Ô∏è '): await process_fav_address_begin(message, state)
    else: await _handle_manual_address_input(message, state, 'begin')

@router.message(DeliveryState.begin_address_voice, F.voice)
async def handle_voice_begin_delivery(message: types.Message, state: FSMContext):
    await state.update_data(begin_address="üìç –ê–¥—Ä–µ—Å–∞ –≥–æ–ª–æ—Å–æ–º", begin_address_voice_id=message.voice.file_id, latitude=None, longitude=None)
    await message.answer(f"‚úÖ –ê–¥—Ä–µ—Å—É '–ó–≤—ñ–¥–∫–∏' –∑–∞–ø–∏—Å–∞–Ω–æ —è–∫ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    await _go_to_finish_address_step(message, state)

@router.message(DeliveryState.finish_address, F.text == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É')
async def handle_manual_input_finish_delivery(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –í–∫–∞–∂—ñ—Ç—å, <b>–ö–£–î–ò</b> –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏:",
        reply_markup=fsm_cancel_keyboard,
    )
    # No state change needed

@router.message(DeliveryState.finish_address, F.text == 'üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–º')
async def handle_voice_input_finish_delivery(message: types.Message, state: FSMContext):
    await message.answer(
        "üéôÔ∏è <b>–ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥—Ä–µ—Å–æ—é –¥–æ—Å—Ç–∞–≤–∫–∏.</b>",
        reply_markup=fsm_cancel_keyboard
    )
    await state.set_state(DeliveryState.finish_address_voice)

@router.message(DeliveryState.finish_address, F.text)
async def handle_text_finish_delivery(message: types.Message, state: FSMContext):
    if message.text.startswith('‚ù§Ô∏è '): await process_fav_address_finish(message, state)
    else: await _handle_manual_address_input(message, state, 'finish')

@router.message(DeliveryState.finish_address_voice, F.voice)
async def handle_voice_finish_delivery(message: types.Message, state: FSMContext):
    await state.update_data(finish_address="üìç –ê–¥—Ä–µ—Å–∞ –≥–æ–ª–æ—Å–æ–º", finish_address_voice_id=message.voice.file_id)
    await message.answer(f'‚úÖ –ê–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∞–Ω–æ —è–∫ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.')
    await _go_to_phone_number_step(message, state)

# --- Handlers that were missing ---

ALL_CONFIRM_UNFOUND_STATES = {
    UserState.confirm_unfound_address, PreOrderState.confirm_unfound_address, DeliveryState.confirm_unfound_address
}
ALL_CLARIFY_STATES = {
    UserState.clarify_begin_address, UserState.clarify_finish_address,
    PreOrderState.clarify_begin_address, PreOrderState.clarify_finish_address,
    DeliveryState.clarify_begin_address, DeliveryState.clarify_finish_address
}

@router.callback_query(ConfirmUnfoundAddress.filter(F.action == "use_anyway"), F.state.in_(ALL_CONFIRM_UNFOUND_STATES))
async def handle_confirm_unfound_use_anyway(call: types.CallbackQuery, callback_data: ConfirmUnfoundAddress, state: FSMContext):
    """Handles the 'Use as is' button for an unfound address."""
    await process_confirm_unfound_address(call, callback_data, state)

@router.callback_query(ConfirmUnfoundAddress.filter(F.action == "retry"), F.state.in_(ALL_CONFIRM_UNFOUND_STATES))
async def handle_confirm_unfound_retry(call: types.CallbackQuery, callback_data: ConfirmUnfoundAddress, state: FSMContext):
    """Handles the 'Retry' button for an unfound address."""
    await process_confirm_unfound_address(call, callback_data, state)

@router.callback_query(ClarifyAddressCallbackData.filter(), F.state.in_(ALL_CLARIFY_STATES))
async def handle_clarified_address(call: types.CallbackQuery, callback_data: ClarifyAddressCallbackData, state: FSMContext):
    """Handles the choice of a clarified address."""
    await process_clarified_address(call, callback_data, state)

@router.callback_query(Navigate.filter(F.to == "clarify_addr_skip"), F.state.in_(ALL_CLARIFY_STATES))
async def handle_clarify_skip(call: types.CallbackQuery, state: FSMContext):
    """Handles skipping address clarification."""
    await process_clarify_skip(call, state)

@router.callback_query(Navigate.filter(F.to == "clarify_addr_retry"), F.state.in_(ALL_CLARIFY_STATES))
async def handle_clarify_retry(call: types.CallbackQuery, state: FSMContext):
    """Handles retrying address input after clarification."""
    await process_clarify_retry(call, state)

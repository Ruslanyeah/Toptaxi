from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
import html
from aiogram.filters import StateFilter

from states.fsm_states import AdminState
from database import queries as db_queries
from keyboards.common import Navigate
from keyboards.reply_keyboards import fsm_cancel_keyboard
from utils.callback_factories import AdminClientAction
from .admin_helpers import show_clients_page
from ..common.helpers import _display_client_profile

router = Router()

# --- Search Client ---
@router.callback_query(Navigate.filter(F.to == 'start_client_search'))
async def start_client_search(call: types.CallbackQuery, state: FSMContext):
    """Starts the FSM to search for a client."""
    await state.set_state(AdminState.get_client_search_query)
    await call.message.answer(
        "<b>üîé –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å ID, —ñ–º'—è, –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–æ—à—É–∫—É.",
        reply_markup=fsm_cancel_keyboard
    )
    await call.answer()

@router.message(AdminState.get_client_search_query)
async def process_client_search_query(message: types.Message, state: FSMContext):
    """Processes the search query and shows the results."""
    query = message.text
    await state.update_data(client_search_query=query)
    await message.answer("üîé –í–∏–∫–æ–Ω—É—é –ø–æ—à—É–∫...", reply_markup=types.ReplyKeyboardRemove())
    await show_clients_page(message, page=0, search_query=query)

# --- Ban/Unban Client ---
@router.callback_query(AdminClientAction.filter(F.action == 'ban'))
async def ban_client_start(call: types.CallbackQuery, callback_data: AdminClientAction, state: FSMContext):
    """Starts the FSM to ban a client."""
    await state.set_state(AdminState.get_ban_reason)
    await state.update_data(user_id_to_ban=callback_data.user_id)
    await call.message.answer(
        f"<b>üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID {callback_data.user_id}</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (–±—É–¥–µ –≤–∏–¥–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É).",
        reply_markup=fsm_cancel_keyboard
    )
    await call.answer()

@router.message(AdminState.get_ban_reason)
async def process_ban_reason(message: types.Message, state: FSMContext):
    """Processes the ban reason and bans the user."""
    if not message.text:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è.", reply_markup=fsm_cancel_keyboard)
        return

    data = await state.get_data()
    user_id = data.get('user_id_to_ban')
    
    await db_queries.ban_user(user_id, message.text)
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID <code>{user_id}</code> –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
    await message.answer("–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    
    try:
        await message.bot.send_message(user_id, f"<b>–í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.</b>\n–ü—Ä–∏—á–∏–Ω–∞: {html.escape(message.text)}")
    except Exception:
        pass # Ignore if user blocked the bot

    await _display_client_profile(message, user_id)
    await state.clear()

@router.callback_query(AdminClientAction.filter(F.action == 'unban'))
async def unban_client(call: types.CallbackQuery, callback_data: AdminClientAction):
    """Unbans a client."""
    user_id = callback_data.user_id
    await db_queries.unban_user(user_id)
    await call.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID {user_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.", show_alert=True)
    
    try:
        await call.bot.send_message(user_id, "<b>üéâ –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.</b>")
    except Exception:
        pass

    await _display_client_profile(call, user_id)

# --- Send Message to User ---
@router.callback_query(AdminClientAction.filter(F.action == 'send_message'))
async def send_message_to_user_start(call: types.CallbackQuery, callback_data: AdminClientAction, state: FSMContext):
    """Starts the FSM to send a message to a specific user."""
    await state.set_state(AdminState.get_message_to_user)
    await state.update_data(user_id_to_message=callback_data.user_id)
    await call.message.answer(
        f"<b>‚úâÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ID {callback_data.user_id}</b>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ç–æ—â–æ), —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏.",
        reply_markup=fsm_cancel_keyboard
    )
    await call.answer()

@router.message(AdminState.get_message_to_user)
async def process_message_to_user(message: types.Message, state: FSMContext):
    """Copies and sends the message to the target user."""
    data = await state.get_data()
    user_id = data.get('user_id_to_message')
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy_message –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ID <code>{user_id}</code>.", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}", reply_markup=types.ReplyKeyboardRemove())
    
    await state.clear()
    await _display_client_profile(message, user_id) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é

# --- Get User Info by ID ---
@router.callback_query(Navigate.filter(F.to == 'get_user_info'))
async def get_user_info_start(call: types.CallbackQuery, state: FSMContext):
    """Starts the FSM to get user info by ID."""
    await state.set_state(AdminState.get_user_id_for_info)
    # –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å ReplyKeyboard. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    await call.message.answer(
        "<b>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ ID</b>\n\n–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
        reply_markup=fsm_cancel_keyboard
    )
    await call.answer()

@router.message(AdminState.get_user_id_for_info)
async def process_get_user_info_id(message: types.Message, state: FSMContext):
    """Processes the user ID and shows their profile."""
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=fsm_cancel_keyboard)
        return

    user_id = int(message.text)
    await state.clear()
    await message.answer("‚úÖ –ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    await _display_client_profile(message, user_id)

# --- Generic FSM Cancellation ---

@router.message(
    StateFilter(
        AdminState.get_client_search_query,
        AdminState.get_ban_reason,
        AdminState.get_message_to_user,
        AdminState.get_user_id_for_info
    ),
    F.text == "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏"
)
async def cancel_user_management_action(message: types.Message, state: FSMContext):
    """Cancels any FSM action in this module."""
    await state.clear()
    await message.answer("‚úÖ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # await user_management_menu(message) # –ü–æ—Ç—Ä–µ–±—É–µ—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏ –Ω–µ–±–æ–ª—å—à–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
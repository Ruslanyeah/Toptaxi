from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
import html, logging

from states.fsm_states import AdminState
from database import queries as db_queries
from keyboards.common import Navigate
from keyboards.reply_keyboards import fsm_cancel_keyboard
from utils.callback_factories import AdminOrderAction
from .admin_helpers import show_client_history_page, show_admin_order_details

logger = logging.getLogger(__name__)

router = Router()

# --- Search Order by Client ID ---

@router.callback_query(Navigate.filter(F.to == 'search_order_by_client'))
async def search_order_by_client_start(call: types.CallbackQuery, state: FSMContext):
    """Starts the FSM to search for orders by client ID."""
    await state.set_state(AdminState.get_client_id_for_order_search)
    await call.message.edit_text(
        "<b>üîé –ü–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ –∫–ª—ñ—î–Ω—Ç—É</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–ª—ñ—î–Ω—Ç–∞, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å.",
        reply_markup=None
    )
    await call.answer()

@router.message(AdminState.get_client_id_for_order_search)
async def process_client_id_for_search(message: types.Message, state: FSMContext):
    """Processes the client ID and shows their order history."""
    if not message.text or not message.text.isdigit():
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID.")
        return

    client_id = int(message.text)
    await state.clear()
    
    # Reuse the existing function to show order history
    await show_client_history_page(message, client_id, page=0)

# --- Search Order by Order ID ---

@router.callback_query(Navigate.filter(F.to == 'search_order_by_id'))
async def search_order_by_id_start(call: types.CallbackQuery, state: FSMContext):
    """Starts the FSM to search for an order by its ID."""
    await state.set_state(AdminState.get_order_id_for_search)
    await call.message.edit_text(
        "<b>üîé –ü–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ ID</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ –¥–µ—Ç–∞–ª—ñ.",
        reply_markup=None
    )
    await call.answer()

@router.message(AdminState.get_order_id_for_search)
async def process_order_id_for_search(message: types.Message, state: FSMContext):
    """Processes the order ID and shows its details."""
    if not message.text or not message.text.isdigit():
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    order_id = int(message.text)
    await state.clear()

    # Create a dummy callback data object to reuse the existing details handler
    class DummyCallbackData:
        def __init__(self, order_id):
            self.order_id = order_id

    await show_admin_order_details(message, DummyCallbackData(order_id))

# --- Reassign Order ---

@router.callback_query(AdminOrderAction.filter(F.action == 'reassign_order'))
async def reassign_order_start(call: types.CallbackQuery, callback_data: AdminOrderAction, state: FSMContext):
    """Starts the FSM to reassign an order to a different driver."""
    await state.set_state(AdminState.get_driver_id_for_reassign)
    await state.update_data(order_id_to_reassign=callback_data.order_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboard –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
    await call.message.answer(
        f"<b>üîÑ –ü–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{callback_data.order_id}</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –Ω–æ–≤–æ–≥–æ –≤–æ–¥—ñ—è.",
        reply_markup=fsm_cancel_keyboard
    )
    await call.answer()

@router.message(AdminState.get_driver_id_for_reassign, F.text)
async def process_reassign_driver_id(message: types.Message, state: FSMContext):
    """
    Processes the new driver's ID, validates it, and reassigns the order.
    """
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: ID –≤–æ–¥—ñ—è –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=fsm_cancel_keyboard)
        return

    new_driver_id = int(message.text)
    data = await state.get_data()
    order_id = data.get('order_id_to_reassign')

    if not order_id:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ü—Ä–æ—Ü–µ—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –≤–æ–¥–∏—Ç–µ–ª—å –∏ —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –æ–Ω
    driver_data = await db_queries.get_driver_for_reassign(new_driver_id)
    if not driver_data:
        await message.answer(f"‚ùå –í–æ–¥—ñ—è –∑ ID <code>{new_driver_id}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=fsm_cancel_keyboard)
        return
    
    if not driver_data['isWorking']:
        await message.answer(f"‚ùå –í–æ–¥—ñ–π ID <code>{new_driver_id}</code> –∑–∞—Ä–∞–∑ –∑–∞–π–Ω—è—Ç–∏–π –Ω–∞ —ñ–Ω—à–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–æ–≥–æ –≤–æ–¥—ñ—è.", reply_markup=fsm_cancel_keyboard)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ä–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
    order_info = await db_queries.get_order_for_reassign(order_id)
    old_driver_id = order_info['driver_id'] if order_info else None

    try:
        await db_queries.reassign_order(order_id, new_driver_id, old_driver_id)
        await message.answer(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ –≤–æ–¥—ñ—è ID <code>{new_driver_id}</code>.", reply_markup=types.ReplyKeyboardRemove())

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await message.bot.send_message(new_driver_id, f"‚ùóÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞—á–∏–≤ –≤–∞–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id}.")
        if old_driver_id:
            await message.bot.send_message(old_driver_id, f"‚ùóÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –±—É–ª–æ –∑–Ω—è—Ç–æ –∑ –≤–∞—Å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        if order_info and order_info['client_id']:
            await message.bot.send_message(order_info['client_id'], f"‚ùóÔ∏è –£–≤–∞–≥–∞! –ù–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –±—É–ª–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ —ñ–Ω—à–æ–≥–æ –≤–æ–¥—ñ—è.")

    except Exception as e:
        logger.error(f"Failed to reassign order {order_id} to driver {new_driver_id}: {e}")
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {e}", reply_markup=types.ReplyKeyboardRemove())
    finally:
        await state.clear()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        class DummyCallbackData:
            def __init__(self, oid): self.order_id = oid
        await show_admin_order_details(message, DummyCallbackData(order_id))

@router.message(AdminState.get_driver_id_for_reassign, F.text == "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_reassign_order(message: types.Message, state: FSMContext):
    """Cancels the order reassignment process."""
    data = await state.get_data()
    order_id = data.get('order_id_to_reassign')
    await state.clear()
    await message.answer("‚úÖ –ü–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    if order_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
        class DummyCallbackData:
            def __init__(self, oid): self.order_id = oid
        await show_admin_order_details(message, DummyCallbackData(order_id))
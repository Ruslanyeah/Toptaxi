import pytest
from unittest.mock import AsyncMock, ANY
import html

from aiogram import types, Bot
from aiogram.types import BotCommand, BotCommandScopeChat

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
# _format_client - "–ø—Ä–∏–≤–∞—Ç–Ω–∞—è", –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –º—ã –º–æ–∂–µ–º –µ—ë –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
from handlers.admin.admin_helpers import _format_client, update_admin_commands


# --- –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ _format_client ---

def test_format_client_with_full_data():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    client_data = {
        'user_id': 12345,
        'full_name': 'John Doe',
        'phone_number': '+1234567890',
        'finish_applic': 10,
        'cancel_applic': 2
    }
    
    expected_output = (
        f"üë§ <b>{html.escape(client_data['full_name'])}</b> (ID: <code>{client_data['user_id']}</code>)\n"
        f"  - –¢–µ–ª–µ—Ñ–æ–Ω: <code>{html.escape(client_data['phone_number'])}</code>\n"
        f"  - –ü–æ—ó–∑–¥–∫–∏: ‚úÖ {client_data['finish_applic']} / ‚ùå {client_data['cancel_applic']}\n\n"
    )
    
    result = _format_client(client_data)
    assert result == expected_output

def test_format_client_with_missing_data():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω).
    """
    client_data = {
        'user_id': 54321,
        'full_name': None,
        'phone_number': None,
        'finish_applic': 0,
        'cancel_applic': 1
    }
    
    expected_output = (
        f"üë§ <b>–Ü–º`—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ</b> (ID: <code>{client_data['user_id']}</code>)\n"
        f"  - –¢–µ–ª–µ—Ñ–æ–Ω: <code>–ù–µ –≤–∫–∞–∑–∞–Ω–æ</code>\n"
        f"  - –ü–æ—ó–∑–¥–∫–∏: ‚úÖ {client_data['finish_applic']} / ‚ùå {client_data['cancel_applic']}\n\n"
    )
    
    result = _format_client(client_data)
    assert result == expected_output


# --- –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ update_admin_commands ---

@pytest.fixture
def mock_bot() -> AsyncMock:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ (–∏–º–∏—Ç–∞—Ü–∏—é) –æ–±—ä–µ–∫—Ç–∞ Bot —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º set_my_commands.
    """
    bot = AsyncMock(spec=Bot)
    bot.set_my_commands = AsyncMock()
    return bot

@pytest.mark.asyncio
async def test_update_admin_commands_grants_admin_rights(mock_bot):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–∏ is_admin=True —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    user_id = 123
    await update_admin_commands(mock_bot, user_id, is_admin=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ set_my_commands –±—ã–ª –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑
    mock_bot.set_my_commands.assert_awaited_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ 'admin'
    call_args = mock_bot.set_my_commands.call_args
    commands_list = call_args.args[0]
    scope = call_args.args[1]
    
    assert any(cmd.command == 'admin' for cmd in commands_list)
    assert isinstance(scope, BotCommandScopeChat)
    assert scope.chat_id == user_id

@pytest.mark.asyncio
async def test_update_admin_commands_revokes_admin_rights(mock_bot):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–∏ is_admin=False —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = 456
    await update_admin_commands(mock_bot, user_id, is_admin=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ set_my_commands –±—ã–ª –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑
    mock_bot.set_my_commands.assert_awaited_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥ –ù–ï–¢ –∫–æ–º–∞–Ω–¥—ã 'admin'
    call_args = mock_bot.set_my_commands.call_args
    commands_list = call_args.args[0]
    scope = call_args.args[1]

    assert not any(cmd.command == 'admin' for cmd in commands_list)
    assert isinstance(scope, BotCommandScopeChat)
    assert scope.chat_id == user_id